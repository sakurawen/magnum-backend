// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"magnum/ent/formfield"
	"magnum/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormFieldDelete is the builder for deleting a FormField entity.
type FormFieldDelete struct {
	config
	hooks    []Hook
	mutation *FormFieldMutation
}

// Where appends a list predicates to the FormFieldDelete builder.
func (ffd *FormFieldDelete) Where(ps ...predicate.FormField) *FormFieldDelete {
	ffd.mutation.Where(ps...)
	return ffd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ffd *FormFieldDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, FormFieldMutation](ctx, ffd.sqlExec, ffd.mutation, ffd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ffd *FormFieldDelete) ExecX(ctx context.Context) int {
	n, err := ffd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ffd *FormFieldDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(formfield.Table, sqlgraph.NewFieldSpec(formfield.FieldID, field.TypeString))
	if ps := ffd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ffd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ffd.mutation.done = true
	return affected, err
}

// FormFieldDeleteOne is the builder for deleting a single FormField entity.
type FormFieldDeleteOne struct {
	ffd *FormFieldDelete
}

// Where appends a list predicates to the FormFieldDelete builder.
func (ffdo *FormFieldDeleteOne) Where(ps ...predicate.FormField) *FormFieldDeleteOne {
	ffdo.ffd.mutation.Where(ps...)
	return ffdo
}

// Exec executes the deletion query.
func (ffdo *FormFieldDeleteOne) Exec(ctx context.Context) error {
	n, err := ffdo.ffd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{formfield.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ffdo *FormFieldDeleteOne) ExecX(ctx context.Context) {
	if err := ffdo.Exec(ctx); err != nil {
		panic(err)
	}
}
