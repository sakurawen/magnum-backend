// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/formsubmissiondata"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormSubmissionDataCreate is the builder for creating a FormSubmissionData entity.
type FormSubmissionDataCreate struct {
	config
	mutation *FormSubmissionDataMutation
	hooks    []Hook
}

// SetSubmissionID sets the "submission_id" field.
func (fsdc *FormSubmissionDataCreate) SetSubmissionID(s string) *FormSubmissionDataCreate {
	fsdc.mutation.SetSubmissionID(s)
	return fsdc
}

// SetFieldID sets the "field_id" field.
func (fsdc *FormSubmissionDataCreate) SetFieldID(s string) *FormSubmissionDataCreate {
	fsdc.mutation.SetFieldID(s)
	return fsdc
}

// SetFieldValue sets the "field_value" field.
func (fsdc *FormSubmissionDataCreate) SetFieldValue(s string) *FormSubmissionDataCreate {
	fsdc.mutation.SetFieldValue(s)
	return fsdc
}

// SetCreateAt sets the "create_at" field.
func (fsdc *FormSubmissionDataCreate) SetCreateAt(t time.Time) *FormSubmissionDataCreate {
	fsdc.mutation.SetCreateAt(t)
	return fsdc
}

// SetIsDeleted sets the "is_deleted" field.
func (fsdc *FormSubmissionDataCreate) SetIsDeleted(i int) *FormSubmissionDataCreate {
	fsdc.mutation.SetIsDeleted(i)
	return fsdc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (fsdc *FormSubmissionDataCreate) SetNillableIsDeleted(i *int) *FormSubmissionDataCreate {
	if i != nil {
		fsdc.SetIsDeleted(*i)
	}
	return fsdc
}

// SetID sets the "id" field.
func (fsdc *FormSubmissionDataCreate) SetID(s string) *FormSubmissionDataCreate {
	fsdc.mutation.SetID(s)
	return fsdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fsdc *FormSubmissionDataCreate) SetNillableID(s *string) *FormSubmissionDataCreate {
	if s != nil {
		fsdc.SetID(*s)
	}
	return fsdc
}

// Mutation returns the FormSubmissionDataMutation object of the builder.
func (fsdc *FormSubmissionDataCreate) Mutation() *FormSubmissionDataMutation {
	return fsdc.mutation
}

// Save creates the FormSubmissionData in the database.
func (fsdc *FormSubmissionDataCreate) Save(ctx context.Context) (*FormSubmissionData, error) {
	fsdc.defaults()
	return withHooks[*FormSubmissionData, FormSubmissionDataMutation](ctx, fsdc.sqlSave, fsdc.mutation, fsdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fsdc *FormSubmissionDataCreate) SaveX(ctx context.Context) *FormSubmissionData {
	v, err := fsdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsdc *FormSubmissionDataCreate) Exec(ctx context.Context) error {
	_, err := fsdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsdc *FormSubmissionDataCreate) ExecX(ctx context.Context) {
	if err := fsdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsdc *FormSubmissionDataCreate) defaults() {
	if _, ok := fsdc.mutation.IsDeleted(); !ok {
		v := formsubmissiondata.DefaultIsDeleted
		fsdc.mutation.SetIsDeleted(v)
	}
	if _, ok := fsdc.mutation.ID(); !ok {
		v := formsubmissiondata.DefaultID()
		fsdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsdc *FormSubmissionDataCreate) check() error {
	if _, ok := fsdc.mutation.SubmissionID(); !ok {
		return &ValidationError{Name: "submission_id", err: errors.New(`ent: missing required field "FormSubmissionData.submission_id"`)}
	}
	if _, ok := fsdc.mutation.FieldID(); !ok {
		return &ValidationError{Name: "field_id", err: errors.New(`ent: missing required field "FormSubmissionData.field_id"`)}
	}
	if _, ok := fsdc.mutation.FieldValue(); !ok {
		return &ValidationError{Name: "field_value", err: errors.New(`ent: missing required field "FormSubmissionData.field_value"`)}
	}
	if _, ok := fsdc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "FormSubmissionData.create_at"`)}
	}
	if _, ok := fsdc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "FormSubmissionData.is_deleted"`)}
	}
	return nil
}

func (fsdc *FormSubmissionDataCreate) sqlSave(ctx context.Context) (*FormSubmissionData, error) {
	if err := fsdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fsdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FormSubmissionData.ID type: %T", _spec.ID.Value)
		}
	}
	fsdc.mutation.id = &_node.ID
	fsdc.mutation.done = true
	return _node, nil
}

func (fsdc *FormSubmissionDataCreate) createSpec() (*FormSubmissionData, *sqlgraph.CreateSpec) {
	var (
		_node = &FormSubmissionData{config: fsdc.config}
		_spec = sqlgraph.NewCreateSpec(formsubmissiondata.Table, sqlgraph.NewFieldSpec(formsubmissiondata.FieldID, field.TypeString))
	)
	if id, ok := fsdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fsdc.mutation.SubmissionID(); ok {
		_spec.SetField(formsubmissiondata.FieldSubmissionID, field.TypeString, value)
		_node.SubmissionID = value
	}
	if value, ok := fsdc.mutation.FieldID(); ok {
		_spec.SetField(formsubmissiondata.FieldFieldID, field.TypeString, value)
		_node.FieldID = value
	}
	if value, ok := fsdc.mutation.FieldValue(); ok {
		_spec.SetField(formsubmissiondata.FieldFieldValue, field.TypeString, value)
		_node.FieldValue = value
	}
	if value, ok := fsdc.mutation.CreateAt(); ok {
		_spec.SetField(formsubmissiondata.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := fsdc.mutation.IsDeleted(); ok {
		_spec.SetField(formsubmissiondata.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	return _node, _spec
}

// FormSubmissionDataCreateBulk is the builder for creating many FormSubmissionData entities in bulk.
type FormSubmissionDataCreateBulk struct {
	config
	builders []*FormSubmissionDataCreate
}

// Save creates the FormSubmissionData entities in the database.
func (fsdcb *FormSubmissionDataCreateBulk) Save(ctx context.Context) ([]*FormSubmissionData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fsdcb.builders))
	nodes := make([]*FormSubmissionData, len(fsdcb.builders))
	mutators := make([]Mutator, len(fsdcb.builders))
	for i := range fsdcb.builders {
		func(i int, root context.Context) {
			builder := fsdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormSubmissionDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fsdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fsdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fsdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fsdcb *FormSubmissionDataCreateBulk) SaveX(ctx context.Context) []*FormSubmissionData {
	v, err := fsdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsdcb *FormSubmissionDataCreateBulk) Exec(ctx context.Context) error {
	_, err := fsdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsdcb *FormSubmissionDataCreateBulk) ExecX(ctx context.Context) {
	if err := fsdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
