// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/form"
	"magnum/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormUpdate is the builder for updating Form entities.
type FormUpdate struct {
	config
	hooks    []Hook
	mutation *FormMutation
}

// Where appends a list predicates to the FormUpdate builder.
func (fu *FormUpdate) Where(ps ...predicate.Form) *FormUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FormUpdate) SetUserID(s string) *FormUpdate {
	fu.mutation.SetUserID(s)
	return fu
}

// SetTitle sets the "title" field.
func (fu *FormUpdate) SetTitle(s string) *FormUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetDescription sets the "description" field.
func (fu *FormUpdate) SetDescription(s string) *FormUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetCreateAt sets the "create_at" field.
func (fu *FormUpdate) SetCreateAt(t time.Time) *FormUpdate {
	fu.mutation.SetCreateAt(t)
	return fu
}

// SetUpdateAt sets the "update_at" field.
func (fu *FormUpdate) SetUpdateAt(t time.Time) *FormUpdate {
	fu.mutation.SetUpdateAt(t)
	return fu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (fu *FormUpdate) SetNillableUpdateAt(t *time.Time) *FormUpdate {
	if t != nil {
		fu.SetUpdateAt(*t)
	}
	return fu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (fu *FormUpdate) ClearUpdateAt() *FormUpdate {
	fu.mutation.ClearUpdateAt()
	return fu
}

// Mutation returns the FormMutation object of the builder.
func (fu *FormUpdate) Mutation() *FormMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FormUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FormMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FormUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FormUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FormUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FormUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(form.Table, form.Columns, sqlgraph.NewFieldSpec(form.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UserID(); ok {
		_spec.SetField(form.FieldUserID, field.TypeString, value)
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(form.FieldTitle, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(form.FieldDescription, field.TypeString, value)
	}
	if value, ok := fu.mutation.CreateAt(); ok {
		_spec.SetField(form.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UpdateAt(); ok {
		_spec.SetField(form.FieldUpdateAt, field.TypeTime, value)
	}
	if fu.mutation.UpdateAtCleared() {
		_spec.ClearField(form.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FormUpdateOne is the builder for updating a single Form entity.
type FormUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormMutation
}

// SetUserID sets the "user_id" field.
func (fuo *FormUpdateOne) SetUserID(s string) *FormUpdateOne {
	fuo.mutation.SetUserID(s)
	return fuo
}

// SetTitle sets the "title" field.
func (fuo *FormUpdateOne) SetTitle(s string) *FormUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FormUpdateOne) SetDescription(s string) *FormUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetCreateAt sets the "create_at" field.
func (fuo *FormUpdateOne) SetCreateAt(t time.Time) *FormUpdateOne {
	fuo.mutation.SetCreateAt(t)
	return fuo
}

// SetUpdateAt sets the "update_at" field.
func (fuo *FormUpdateOne) SetUpdateAt(t time.Time) *FormUpdateOne {
	fuo.mutation.SetUpdateAt(t)
	return fuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (fuo *FormUpdateOne) SetNillableUpdateAt(t *time.Time) *FormUpdateOne {
	if t != nil {
		fuo.SetUpdateAt(*t)
	}
	return fuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (fuo *FormUpdateOne) ClearUpdateAt() *FormUpdateOne {
	fuo.mutation.ClearUpdateAt()
	return fuo
}

// Mutation returns the FormMutation object of the builder.
func (fuo *FormUpdateOne) Mutation() *FormMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FormUpdate builder.
func (fuo *FormUpdateOne) Where(ps ...predicate.Form) *FormUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FormUpdateOne) Select(field string, fields ...string) *FormUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Form entity.
func (fuo *FormUpdateOne) Save(ctx context.Context) (*Form, error) {
	return withHooks[*Form, FormMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FormUpdateOne) SaveX(ctx context.Context) *Form {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FormUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FormUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FormUpdateOne) sqlSave(ctx context.Context) (_node *Form, err error) {
	_spec := sqlgraph.NewUpdateSpec(form.Table, form.Columns, sqlgraph.NewFieldSpec(form.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Form.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, form.FieldID)
		for _, f := range fields {
			if !form.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != form.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UserID(); ok {
		_spec.SetField(form.FieldUserID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(form.FieldTitle, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(form.FieldDescription, field.TypeString, value)
	}
	if value, ok := fuo.mutation.CreateAt(); ok {
		_spec.SetField(form.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UpdateAt(); ok {
		_spec.SetField(form.FieldUpdateAt, field.TypeTime, value)
	}
	if fuo.mutation.UpdateAtCleared() {
		_spec.ClearField(form.FieldUpdateAt, field.TypeTime)
	}
	_node = &Form{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
