// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"magnum/ent/formsubmissiondata"
	"magnum/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormSubmissionDataDelete is the builder for deleting a FormSubmissionData entity.
type FormSubmissionDataDelete struct {
	config
	hooks    []Hook
	mutation *FormSubmissionDataMutation
}

// Where appends a list predicates to the FormSubmissionDataDelete builder.
func (fsdd *FormSubmissionDataDelete) Where(ps ...predicate.FormSubmissionData) *FormSubmissionDataDelete {
	fsdd.mutation.Where(ps...)
	return fsdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fsdd *FormSubmissionDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, FormSubmissionDataMutation](ctx, fsdd.sqlExec, fsdd.mutation, fsdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fsdd *FormSubmissionDataDelete) ExecX(ctx context.Context) int {
	n, err := fsdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fsdd *FormSubmissionDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(formsubmissiondata.Table, sqlgraph.NewFieldSpec(formsubmissiondata.FieldID, field.TypeString))
	if ps := fsdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fsdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fsdd.mutation.done = true
	return affected, err
}

// FormSubmissionDataDeleteOne is the builder for deleting a single FormSubmissionData entity.
type FormSubmissionDataDeleteOne struct {
	fsdd *FormSubmissionDataDelete
}

// Where appends a list predicates to the FormSubmissionDataDelete builder.
func (fsddo *FormSubmissionDataDeleteOne) Where(ps ...predicate.FormSubmissionData) *FormSubmissionDataDeleteOne {
	fsddo.fsdd.mutation.Where(ps...)
	return fsddo
}

// Exec executes the deletion query.
func (fsddo *FormSubmissionDataDeleteOne) Exec(ctx context.Context) error {
	n, err := fsddo.fsdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{formsubmissiondata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fsddo *FormSubmissionDataDeleteOne) ExecX(ctx context.Context) {
	if err := fsddo.Exec(ctx); err != nil {
		panic(err)
	}
}
