// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/formfieldconfig"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormFieldConfigCreate is the builder for creating a FormFieldConfig entity.
type FormFieldConfigCreate struct {
	config
	mutation *FormFieldConfigMutation
	hooks    []Hook
}

// SetFieldID sets the "field_id" field.
func (ffcc *FormFieldConfigCreate) SetFieldID(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetFieldID(s)
	return ffcc
}

// SetFormID sets the "form_id" field.
func (ffcc *FormFieldConfigCreate) SetFormID(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetFormID(s)
	return ffcc
}

// SetKey sets the "key" field.
func (ffcc *FormFieldConfigCreate) SetKey(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetKey(s)
	return ffcc
}

// SetType sets the "type" field.
func (ffcc *FormFieldConfigCreate) SetType(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetType(s)
	return ffcc
}

// SetValue sets the "value" field.
func (ffcc *FormFieldConfigCreate) SetValue(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetValue(s)
	return ffcc
}

// SetJSONStringValue sets the "json_string_value" field.
func (ffcc *FormFieldConfigCreate) SetJSONStringValue(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetJSONStringValue(s)
	return ffcc
}

// SetNillableJSONStringValue sets the "json_string_value" field if the given value is not nil.
func (ffcc *FormFieldConfigCreate) SetNillableJSONStringValue(s *string) *FormFieldConfigCreate {
	if s != nil {
		ffcc.SetJSONStringValue(*s)
	}
	return ffcc
}

// SetText sets the "text" field.
func (ffcc *FormFieldConfigCreate) SetText(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetText(s)
	return ffcc
}

// SetOrderIndex sets the "order_index" field.
func (ffcc *FormFieldConfigCreate) SetOrderIndex(i int) *FormFieldConfigCreate {
	ffcc.mutation.SetOrderIndex(i)
	return ffcc
}

// SetDisabled sets the "disabled" field.
func (ffcc *FormFieldConfigCreate) SetDisabled(i int) *FormFieldConfigCreate {
	ffcc.mutation.SetDisabled(i)
	return ffcc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ffcc *FormFieldConfigCreate) SetNillableDisabled(i *int) *FormFieldConfigCreate {
	if i != nil {
		ffcc.SetDisabled(*i)
	}
	return ffcc
}

// SetID sets the "id" field.
func (ffcc *FormFieldConfigCreate) SetID(s string) *FormFieldConfigCreate {
	ffcc.mutation.SetID(s)
	return ffcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ffcc *FormFieldConfigCreate) SetNillableID(s *string) *FormFieldConfigCreate {
	if s != nil {
		ffcc.SetID(*s)
	}
	return ffcc
}

// Mutation returns the FormFieldConfigMutation object of the builder.
func (ffcc *FormFieldConfigCreate) Mutation() *FormFieldConfigMutation {
	return ffcc.mutation
}

// Save creates the FormFieldConfig in the database.
func (ffcc *FormFieldConfigCreate) Save(ctx context.Context) (*FormFieldConfig, error) {
	ffcc.defaults()
	return withHooks[*FormFieldConfig, FormFieldConfigMutation](ctx, ffcc.sqlSave, ffcc.mutation, ffcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ffcc *FormFieldConfigCreate) SaveX(ctx context.Context) *FormFieldConfig {
	v, err := ffcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffcc *FormFieldConfigCreate) Exec(ctx context.Context) error {
	_, err := ffcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffcc *FormFieldConfigCreate) ExecX(ctx context.Context) {
	if err := ffcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ffcc *FormFieldConfigCreate) defaults() {
	if _, ok := ffcc.mutation.Disabled(); !ok {
		v := formfieldconfig.DefaultDisabled
		ffcc.mutation.SetDisabled(v)
	}
	if _, ok := ffcc.mutation.ID(); !ok {
		v := formfieldconfig.DefaultID()
		ffcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffcc *FormFieldConfigCreate) check() error {
	if _, ok := ffcc.mutation.FieldID(); !ok {
		return &ValidationError{Name: "field_id", err: errors.New(`ent: missing required field "FormFieldConfig.field_id"`)}
	}
	if _, ok := ffcc.mutation.FormID(); !ok {
		return &ValidationError{Name: "form_id", err: errors.New(`ent: missing required field "FormFieldConfig.form_id"`)}
	}
	if _, ok := ffcc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "FormFieldConfig.key"`)}
	}
	if _, ok := ffcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FormFieldConfig.type"`)}
	}
	if _, ok := ffcc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "FormFieldConfig.value"`)}
	}
	if _, ok := ffcc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "FormFieldConfig.text"`)}
	}
	if _, ok := ffcc.mutation.OrderIndex(); !ok {
		return &ValidationError{Name: "order_index", err: errors.New(`ent: missing required field "FormFieldConfig.order_index"`)}
	}
	if _, ok := ffcc.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "FormFieldConfig.disabled"`)}
	}
	return nil
}

func (ffcc *FormFieldConfigCreate) sqlSave(ctx context.Context) (*FormFieldConfig, error) {
	if err := ffcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ffcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ffcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FormFieldConfig.ID type: %T", _spec.ID.Value)
		}
	}
	ffcc.mutation.id = &_node.ID
	ffcc.mutation.done = true
	return _node, nil
}

func (ffcc *FormFieldConfigCreate) createSpec() (*FormFieldConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &FormFieldConfig{config: ffcc.config}
		_spec = sqlgraph.NewCreateSpec(formfieldconfig.Table, sqlgraph.NewFieldSpec(formfieldconfig.FieldID, field.TypeString))
	)
	if id, ok := ffcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ffcc.mutation.FieldID(); ok {
		_spec.SetField(formfieldconfig.FieldFieldID, field.TypeString, value)
		_node.FieldID = value
	}
	if value, ok := ffcc.mutation.FormID(); ok {
		_spec.SetField(formfieldconfig.FieldFormID, field.TypeString, value)
		_node.FormID = value
	}
	if value, ok := ffcc.mutation.Key(); ok {
		_spec.SetField(formfieldconfig.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ffcc.mutation.GetType(); ok {
		_spec.SetField(formfieldconfig.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ffcc.mutation.Value(); ok {
		_spec.SetField(formfieldconfig.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := ffcc.mutation.JSONStringValue(); ok {
		_spec.SetField(formfieldconfig.FieldJSONStringValue, field.TypeString, value)
		_node.JSONStringValue = value
	}
	if value, ok := ffcc.mutation.Text(); ok {
		_spec.SetField(formfieldconfig.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := ffcc.mutation.OrderIndex(); ok {
		_spec.SetField(formfieldconfig.FieldOrderIndex, field.TypeInt, value)
		_node.OrderIndex = value
	}
	if value, ok := ffcc.mutation.Disabled(); ok {
		_spec.SetField(formfieldconfig.FieldDisabled, field.TypeInt, value)
		_node.Disabled = value
	}
	return _node, _spec
}

// FormFieldConfigCreateBulk is the builder for creating many FormFieldConfig entities in bulk.
type FormFieldConfigCreateBulk struct {
	config
	builders []*FormFieldConfigCreate
}

// Save creates the FormFieldConfig entities in the database.
func (ffccb *FormFieldConfigCreateBulk) Save(ctx context.Context) ([]*FormFieldConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ffccb.builders))
	nodes := make([]*FormFieldConfig, len(ffccb.builders))
	mutators := make([]Mutator, len(ffccb.builders))
	for i := range ffccb.builders {
		func(i int, root context.Context) {
			builder := ffccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormFieldConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ffccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ffccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ffccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ffccb *FormFieldConfigCreateBulk) SaveX(ctx context.Context) []*FormFieldConfig {
	v, err := ffccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffccb *FormFieldConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := ffccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffccb *FormFieldConfigCreateBulk) ExecX(ctx context.Context) {
	if err := ffccb.Exec(ctx); err != nil {
		panic(err)
	}
}
