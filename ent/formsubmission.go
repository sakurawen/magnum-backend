// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"magnum/ent/formsubmission"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// FormSubmission is the model entity for the FormSubmission schema.
type FormSubmission struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// 表单id
	FormID string `json:"form_id,omitempty"`
	// 用户id
	UserID string `json:"user_id,omitempty"`
	// 创建时间
	CreateID time.Time `json:"create_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FormSubmission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case formsubmission.FieldID, formsubmission.FieldFormID, formsubmission.FieldUserID:
			values[i] = new(sql.NullString)
		case formsubmission.FieldCreateID:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FormSubmission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FormSubmission fields.
func (fs *FormSubmission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case formsubmission.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fs.ID = value.String
			}
		case formsubmission.FieldFormID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_id", values[i])
			} else if value.Valid {
				fs.FormID = value.String
			}
		case formsubmission.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				fs.UserID = value.String
			}
		case formsubmission.FieldCreateID:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_id", values[i])
			} else if value.Valid {
				fs.CreateID = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FormSubmission.
// Note that you need to call FormSubmission.Unwrap() before calling this method if this FormSubmission
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FormSubmission) Update() *FormSubmissionUpdateOne {
	return NewFormSubmissionClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FormSubmission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FormSubmission) Unwrap() *FormSubmission {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FormSubmission is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FormSubmission) String() string {
	var builder strings.Builder
	builder.WriteString("FormSubmission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("form_id=")
	builder.WriteString(fs.FormID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fs.UserID)
	builder.WriteString(", ")
	builder.WriteString("create_id=")
	builder.WriteString(fs.CreateID.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FormSubmissions is a parsable slice of FormSubmission.
type FormSubmissions []*FormSubmission
