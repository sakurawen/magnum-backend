// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"magnum/ent/formfieldconfig"
	"magnum/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormFieldConfigDelete is the builder for deleting a FormFieldConfig entity.
type FormFieldConfigDelete struct {
	config
	hooks    []Hook
	mutation *FormFieldConfigMutation
}

// Where appends a list predicates to the FormFieldConfigDelete builder.
func (ffcd *FormFieldConfigDelete) Where(ps ...predicate.FormFieldConfig) *FormFieldConfigDelete {
	ffcd.mutation.Where(ps...)
	return ffcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ffcd *FormFieldConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, FormFieldConfigMutation](ctx, ffcd.sqlExec, ffcd.mutation, ffcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ffcd *FormFieldConfigDelete) ExecX(ctx context.Context) int {
	n, err := ffcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ffcd *FormFieldConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(formfieldconfig.Table, sqlgraph.NewFieldSpec(formfieldconfig.FieldID, field.TypeString))
	if ps := ffcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ffcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ffcd.mutation.done = true
	return affected, err
}

// FormFieldConfigDeleteOne is the builder for deleting a single FormFieldConfig entity.
type FormFieldConfigDeleteOne struct {
	ffcd *FormFieldConfigDelete
}

// Where appends a list predicates to the FormFieldConfigDelete builder.
func (ffcdo *FormFieldConfigDeleteOne) Where(ps ...predicate.FormFieldConfig) *FormFieldConfigDeleteOne {
	ffcdo.ffcd.mutation.Where(ps...)
	return ffcdo
}

// Exec executes the deletion query.
func (ffcdo *FormFieldConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := ffcdo.ffcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{formfieldconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ffcdo *FormFieldConfigDeleteOne) ExecX(ctx context.Context) {
	if err := ffcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
