// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"magnum/ent/migrate"

	"magnum/ent/form"
	"magnum/ent/formfield"
	"magnum/ent/formsubmission"
	"magnum/ent/formsubmissiondata"
	"magnum/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Form is the client for interacting with the Form builders.
	Form *FormClient
	// FormField is the client for interacting with the FormField builders.
	FormField *FormFieldClient
	// FormSubmission is the client for interacting with the FormSubmission builders.
	FormSubmission *FormSubmissionClient
	// FormSubmissionData is the client for interacting with the FormSubmissionData builders.
	FormSubmissionData *FormSubmissionDataClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Form = NewFormClient(c.config)
	c.FormField = NewFormFieldClient(c.config)
	c.FormSubmission = NewFormSubmissionClient(c.config)
	c.FormSubmissionData = NewFormSubmissionDataClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Form:               NewFormClient(cfg),
		FormField:          NewFormFieldClient(cfg),
		FormSubmission:     NewFormSubmissionClient(cfg),
		FormSubmissionData: NewFormSubmissionDataClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Form:               NewFormClient(cfg),
		FormField:          NewFormFieldClient(cfg),
		FormSubmission:     NewFormSubmissionClient(cfg),
		FormSubmissionData: NewFormSubmissionDataClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Form.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Form.Use(hooks...)
	c.FormField.Use(hooks...)
	c.FormSubmission.Use(hooks...)
	c.FormSubmissionData.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Form.Intercept(interceptors...)
	c.FormField.Intercept(interceptors...)
	c.FormSubmission.Intercept(interceptors...)
	c.FormSubmissionData.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *FormMutation:
		return c.Form.mutate(ctx, m)
	case *FormFieldMutation:
		return c.FormField.mutate(ctx, m)
	case *FormSubmissionMutation:
		return c.FormSubmission.mutate(ctx, m)
	case *FormSubmissionDataMutation:
		return c.FormSubmissionData.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// FormClient is a client for the Form schema.
type FormClient struct {
	config
}

// NewFormClient returns a client for the Form from the given config.
func NewFormClient(c config) *FormClient {
	return &FormClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `form.Hooks(f(g(h())))`.
func (c *FormClient) Use(hooks ...Hook) {
	c.hooks.Form = append(c.hooks.Form, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `form.Intercept(f(g(h())))`.
func (c *FormClient) Intercept(interceptors ...Interceptor) {
	c.inters.Form = append(c.inters.Form, interceptors...)
}

// Create returns a builder for creating a Form entity.
func (c *FormClient) Create() *FormCreate {
	mutation := newFormMutation(c.config, OpCreate)
	return &FormCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Form entities.
func (c *FormClient) CreateBulk(builders ...*FormCreate) *FormCreateBulk {
	return &FormCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Form.
func (c *FormClient) Update() *FormUpdate {
	mutation := newFormMutation(c.config, OpUpdate)
	return &FormUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormClient) UpdateOne(f *Form) *FormUpdateOne {
	mutation := newFormMutation(c.config, OpUpdateOne, withForm(f))
	return &FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormClient) UpdateOneID(id string) *FormUpdateOne {
	mutation := newFormMutation(c.config, OpUpdateOne, withFormID(id))
	return &FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Form.
func (c *FormClient) Delete() *FormDelete {
	mutation := newFormMutation(c.config, OpDelete)
	return &FormDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FormClient) DeleteOne(f *Form) *FormDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FormClient) DeleteOneID(id string) *FormDeleteOne {
	builder := c.Delete().Where(form.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormDeleteOne{builder}
}

// Query returns a query builder for Form.
func (c *FormClient) Query() *FormQuery {
	return &FormQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeForm},
		inters: c.Interceptors(),
	}
}

// Get returns a Form entity by its id.
func (c *FormClient) Get(ctx context.Context, id string) (*Form, error) {
	return c.Query().Where(form.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormClient) GetX(ctx context.Context, id string) *Form {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FormClient) Hooks() []Hook {
	return c.hooks.Form
}

// Interceptors returns the client interceptors.
func (c *FormClient) Interceptors() []Interceptor {
	return c.inters.Form
}

func (c *FormClient) mutate(ctx context.Context, m *FormMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FormCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FormUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FormDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Form mutation op: %q", m.Op())
	}
}

// FormFieldClient is a client for the FormField schema.
type FormFieldClient struct {
	config
}

// NewFormFieldClient returns a client for the FormField from the given config.
func NewFormFieldClient(c config) *FormFieldClient {
	return &FormFieldClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `formfield.Hooks(f(g(h())))`.
func (c *FormFieldClient) Use(hooks ...Hook) {
	c.hooks.FormField = append(c.hooks.FormField, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `formfield.Intercept(f(g(h())))`.
func (c *FormFieldClient) Intercept(interceptors ...Interceptor) {
	c.inters.FormField = append(c.inters.FormField, interceptors...)
}

// Create returns a builder for creating a FormField entity.
func (c *FormFieldClient) Create() *FormFieldCreate {
	mutation := newFormFieldMutation(c.config, OpCreate)
	return &FormFieldCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FormField entities.
func (c *FormFieldClient) CreateBulk(builders ...*FormFieldCreate) *FormFieldCreateBulk {
	return &FormFieldCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FormField.
func (c *FormFieldClient) Update() *FormFieldUpdate {
	mutation := newFormFieldMutation(c.config, OpUpdate)
	return &FormFieldUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormFieldClient) UpdateOne(ff *FormField) *FormFieldUpdateOne {
	mutation := newFormFieldMutation(c.config, OpUpdateOne, withFormField(ff))
	return &FormFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormFieldClient) UpdateOneID(id string) *FormFieldUpdateOne {
	mutation := newFormFieldMutation(c.config, OpUpdateOne, withFormFieldID(id))
	return &FormFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FormField.
func (c *FormFieldClient) Delete() *FormFieldDelete {
	mutation := newFormFieldMutation(c.config, OpDelete)
	return &FormFieldDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FormFieldClient) DeleteOne(ff *FormField) *FormFieldDeleteOne {
	return c.DeleteOneID(ff.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FormFieldClient) DeleteOneID(id string) *FormFieldDeleteOne {
	builder := c.Delete().Where(formfield.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormFieldDeleteOne{builder}
}

// Query returns a query builder for FormField.
func (c *FormFieldClient) Query() *FormFieldQuery {
	return &FormFieldQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFormField},
		inters: c.Interceptors(),
	}
}

// Get returns a FormField entity by its id.
func (c *FormFieldClient) Get(ctx context.Context, id string) (*FormField, error) {
	return c.Query().Where(formfield.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormFieldClient) GetX(ctx context.Context, id string) *FormField {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FormFieldClient) Hooks() []Hook {
	return c.hooks.FormField
}

// Interceptors returns the client interceptors.
func (c *FormFieldClient) Interceptors() []Interceptor {
	return c.inters.FormField
}

func (c *FormFieldClient) mutate(ctx context.Context, m *FormFieldMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FormFieldCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FormFieldUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FormFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FormFieldDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FormField mutation op: %q", m.Op())
	}
}

// FormSubmissionClient is a client for the FormSubmission schema.
type FormSubmissionClient struct {
	config
}

// NewFormSubmissionClient returns a client for the FormSubmission from the given config.
func NewFormSubmissionClient(c config) *FormSubmissionClient {
	return &FormSubmissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `formsubmission.Hooks(f(g(h())))`.
func (c *FormSubmissionClient) Use(hooks ...Hook) {
	c.hooks.FormSubmission = append(c.hooks.FormSubmission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `formsubmission.Intercept(f(g(h())))`.
func (c *FormSubmissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FormSubmission = append(c.inters.FormSubmission, interceptors...)
}

// Create returns a builder for creating a FormSubmission entity.
func (c *FormSubmissionClient) Create() *FormSubmissionCreate {
	mutation := newFormSubmissionMutation(c.config, OpCreate)
	return &FormSubmissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FormSubmission entities.
func (c *FormSubmissionClient) CreateBulk(builders ...*FormSubmissionCreate) *FormSubmissionCreateBulk {
	return &FormSubmissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FormSubmission.
func (c *FormSubmissionClient) Update() *FormSubmissionUpdate {
	mutation := newFormSubmissionMutation(c.config, OpUpdate)
	return &FormSubmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormSubmissionClient) UpdateOne(fs *FormSubmission) *FormSubmissionUpdateOne {
	mutation := newFormSubmissionMutation(c.config, OpUpdateOne, withFormSubmission(fs))
	return &FormSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormSubmissionClient) UpdateOneID(id string) *FormSubmissionUpdateOne {
	mutation := newFormSubmissionMutation(c.config, OpUpdateOne, withFormSubmissionID(id))
	return &FormSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FormSubmission.
func (c *FormSubmissionClient) Delete() *FormSubmissionDelete {
	mutation := newFormSubmissionMutation(c.config, OpDelete)
	return &FormSubmissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FormSubmissionClient) DeleteOne(fs *FormSubmission) *FormSubmissionDeleteOne {
	return c.DeleteOneID(fs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FormSubmissionClient) DeleteOneID(id string) *FormSubmissionDeleteOne {
	builder := c.Delete().Where(formsubmission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormSubmissionDeleteOne{builder}
}

// Query returns a query builder for FormSubmission.
func (c *FormSubmissionClient) Query() *FormSubmissionQuery {
	return &FormSubmissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFormSubmission},
		inters: c.Interceptors(),
	}
}

// Get returns a FormSubmission entity by its id.
func (c *FormSubmissionClient) Get(ctx context.Context, id string) (*FormSubmission, error) {
	return c.Query().Where(formsubmission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormSubmissionClient) GetX(ctx context.Context, id string) *FormSubmission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FormSubmissionClient) Hooks() []Hook {
	return c.hooks.FormSubmission
}

// Interceptors returns the client interceptors.
func (c *FormSubmissionClient) Interceptors() []Interceptor {
	return c.inters.FormSubmission
}

func (c *FormSubmissionClient) mutate(ctx context.Context, m *FormSubmissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FormSubmissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FormSubmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FormSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FormSubmissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FormSubmission mutation op: %q", m.Op())
	}
}

// FormSubmissionDataClient is a client for the FormSubmissionData schema.
type FormSubmissionDataClient struct {
	config
}

// NewFormSubmissionDataClient returns a client for the FormSubmissionData from the given config.
func NewFormSubmissionDataClient(c config) *FormSubmissionDataClient {
	return &FormSubmissionDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `formsubmissiondata.Hooks(f(g(h())))`.
func (c *FormSubmissionDataClient) Use(hooks ...Hook) {
	c.hooks.FormSubmissionData = append(c.hooks.FormSubmissionData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `formsubmissiondata.Intercept(f(g(h())))`.
func (c *FormSubmissionDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.FormSubmissionData = append(c.inters.FormSubmissionData, interceptors...)
}

// Create returns a builder for creating a FormSubmissionData entity.
func (c *FormSubmissionDataClient) Create() *FormSubmissionDataCreate {
	mutation := newFormSubmissionDataMutation(c.config, OpCreate)
	return &FormSubmissionDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FormSubmissionData entities.
func (c *FormSubmissionDataClient) CreateBulk(builders ...*FormSubmissionDataCreate) *FormSubmissionDataCreateBulk {
	return &FormSubmissionDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FormSubmissionData.
func (c *FormSubmissionDataClient) Update() *FormSubmissionDataUpdate {
	mutation := newFormSubmissionDataMutation(c.config, OpUpdate)
	return &FormSubmissionDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormSubmissionDataClient) UpdateOne(fsd *FormSubmissionData) *FormSubmissionDataUpdateOne {
	mutation := newFormSubmissionDataMutation(c.config, OpUpdateOne, withFormSubmissionData(fsd))
	return &FormSubmissionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormSubmissionDataClient) UpdateOneID(id string) *FormSubmissionDataUpdateOne {
	mutation := newFormSubmissionDataMutation(c.config, OpUpdateOne, withFormSubmissionDataID(id))
	return &FormSubmissionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FormSubmissionData.
func (c *FormSubmissionDataClient) Delete() *FormSubmissionDataDelete {
	mutation := newFormSubmissionDataMutation(c.config, OpDelete)
	return &FormSubmissionDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FormSubmissionDataClient) DeleteOne(fsd *FormSubmissionData) *FormSubmissionDataDeleteOne {
	return c.DeleteOneID(fsd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FormSubmissionDataClient) DeleteOneID(id string) *FormSubmissionDataDeleteOne {
	builder := c.Delete().Where(formsubmissiondata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormSubmissionDataDeleteOne{builder}
}

// Query returns a query builder for FormSubmissionData.
func (c *FormSubmissionDataClient) Query() *FormSubmissionDataQuery {
	return &FormSubmissionDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFormSubmissionData},
		inters: c.Interceptors(),
	}
}

// Get returns a FormSubmissionData entity by its id.
func (c *FormSubmissionDataClient) Get(ctx context.Context, id string) (*FormSubmissionData, error) {
	return c.Query().Where(formsubmissiondata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormSubmissionDataClient) GetX(ctx context.Context, id string) *FormSubmissionData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FormSubmissionDataClient) Hooks() []Hook {
	return c.hooks.FormSubmissionData
}

// Interceptors returns the client interceptors.
func (c *FormSubmissionDataClient) Interceptors() []Interceptor {
	return c.inters.FormSubmissionData
}

func (c *FormSubmissionDataClient) mutate(ctx context.Context, m *FormSubmissionDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FormSubmissionDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FormSubmissionDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FormSubmissionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FormSubmissionDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FormSubmissionData mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Form, FormField, FormSubmission, FormSubmissionData, User []ent.Hook
	}
	inters struct {
		Form, FormField, FormSubmission, FormSubmissionData, User []ent.Interceptor
	}
)
