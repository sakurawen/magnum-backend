// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/formsubmission"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormSubmissionCreate is the builder for creating a FormSubmission entity.
type FormSubmissionCreate struct {
	config
	mutation *FormSubmissionMutation
	hooks    []Hook
}

// SetFormID sets the "form_id" field.
func (fsc *FormSubmissionCreate) SetFormID(s string) *FormSubmissionCreate {
	fsc.mutation.SetFormID(s)
	return fsc
}

// SetUserID sets the "user_id" field.
func (fsc *FormSubmissionCreate) SetUserID(s string) *FormSubmissionCreate {
	fsc.mutation.SetUserID(s)
	return fsc
}

// SetCreateAt sets the "create_at" field.
func (fsc *FormSubmissionCreate) SetCreateAt(t time.Time) *FormSubmissionCreate {
	fsc.mutation.SetCreateAt(t)
	return fsc
}

// SetIsDeleted sets the "is_deleted" field.
func (fsc *FormSubmissionCreate) SetIsDeleted(i int) *FormSubmissionCreate {
	fsc.mutation.SetIsDeleted(i)
	return fsc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (fsc *FormSubmissionCreate) SetNillableIsDeleted(i *int) *FormSubmissionCreate {
	if i != nil {
		fsc.SetIsDeleted(*i)
	}
	return fsc
}

// SetID sets the "id" field.
func (fsc *FormSubmissionCreate) SetID(s string) *FormSubmissionCreate {
	fsc.mutation.SetID(s)
	return fsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fsc *FormSubmissionCreate) SetNillableID(s *string) *FormSubmissionCreate {
	if s != nil {
		fsc.SetID(*s)
	}
	return fsc
}

// Mutation returns the FormSubmissionMutation object of the builder.
func (fsc *FormSubmissionCreate) Mutation() *FormSubmissionMutation {
	return fsc.mutation
}

// Save creates the FormSubmission in the database.
func (fsc *FormSubmissionCreate) Save(ctx context.Context) (*FormSubmission, error) {
	fsc.defaults()
	return withHooks[*FormSubmission, FormSubmissionMutation](ctx, fsc.sqlSave, fsc.mutation, fsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FormSubmissionCreate) SaveX(ctx context.Context) *FormSubmission {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FormSubmissionCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FormSubmissionCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsc *FormSubmissionCreate) defaults() {
	if _, ok := fsc.mutation.IsDeleted(); !ok {
		v := formsubmission.DefaultIsDeleted
		fsc.mutation.SetIsDeleted(v)
	}
	if _, ok := fsc.mutation.ID(); !ok {
		v := formsubmission.DefaultID()
		fsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FormSubmissionCreate) check() error {
	if _, ok := fsc.mutation.FormID(); !ok {
		return &ValidationError{Name: "form_id", err: errors.New(`ent: missing required field "FormSubmission.form_id"`)}
	}
	if _, ok := fsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "FormSubmission.user_id"`)}
	}
	if _, ok := fsc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "FormSubmission.create_at"`)}
	}
	if _, ok := fsc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "FormSubmission.is_deleted"`)}
	}
	return nil
}

func (fsc *FormSubmissionCreate) sqlSave(ctx context.Context) (*FormSubmission, error) {
	if err := fsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FormSubmission.ID type: %T", _spec.ID.Value)
		}
	}
	fsc.mutation.id = &_node.ID
	fsc.mutation.done = true
	return _node, nil
}

func (fsc *FormSubmissionCreate) createSpec() (*FormSubmission, *sqlgraph.CreateSpec) {
	var (
		_node = &FormSubmission{config: fsc.config}
		_spec = sqlgraph.NewCreateSpec(formsubmission.Table, sqlgraph.NewFieldSpec(formsubmission.FieldID, field.TypeString))
	)
	if id, ok := fsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fsc.mutation.FormID(); ok {
		_spec.SetField(formsubmission.FieldFormID, field.TypeString, value)
		_node.FormID = value
	}
	if value, ok := fsc.mutation.UserID(); ok {
		_spec.SetField(formsubmission.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := fsc.mutation.CreateAt(); ok {
		_spec.SetField(formsubmission.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := fsc.mutation.IsDeleted(); ok {
		_spec.SetField(formsubmission.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	return _node, _spec
}

// FormSubmissionCreateBulk is the builder for creating many FormSubmission entities in bulk.
type FormSubmissionCreateBulk struct {
	config
	builders []*FormSubmissionCreate
}

// Save creates the FormSubmission entities in the database.
func (fscb *FormSubmissionCreateBulk) Save(ctx context.Context) ([]*FormSubmission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FormSubmission, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormSubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FormSubmissionCreateBulk) SaveX(ctx context.Context) []*FormSubmission {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FormSubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FormSubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}
