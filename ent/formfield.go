// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"magnum/ent/formfield"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// FormField is the model entity for the FormField schema.
type FormField struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// 字段对应的表单id
	FormID string `json:"form_id,omitempty"`
	// 字段类型
	FieldType string `json:"field_type,omitempty"`
	// 字段名称
	FieldName string `json:"field_name,omitempty"`
	// 排序字段
	OrderIndex int `json:"order_index"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 是否禁用
	Disabled int `json:"disabled"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FormField) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case formfield.FieldOrderIndex, formfield.FieldDisabled:
			values[i] = new(sql.NullInt64)
		case formfield.FieldID, formfield.FieldFormID, formfield.FieldFieldType, formfield.FieldFieldName:
			values[i] = new(sql.NullString)
		case formfield.FieldCreateAt, formfield.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FormField", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FormField fields.
func (ff *FormField) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case formfield.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ff.ID = value.String
			}
		case formfield.FieldFormID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_id", values[i])
			} else if value.Valid {
				ff.FormID = value.String
			}
		case formfield.FieldFieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field_type", values[i])
			} else if value.Valid {
				ff.FieldType = value.String
			}
		case formfield.FieldFieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field_name", values[i])
			} else if value.Valid {
				ff.FieldName = value.String
			}
		case formfield.FieldOrderIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_index", values[i])
			} else if value.Valid {
				ff.OrderIndex = int(value.Int64)
			}
		case formfield.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ff.CreateAt = value.Time
			}
		case formfield.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ff.UpdateAt = value.Time
			}
		case formfield.FieldDisabled:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				ff.Disabled = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FormField.
// Note that you need to call FormField.Unwrap() before calling this method if this FormField
// was returned from a transaction, and the transaction was committed or rolled back.
func (ff *FormField) Update() *FormFieldUpdateOne {
	return NewFormFieldClient(ff.config).UpdateOne(ff)
}

// Unwrap unwraps the FormField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ff *FormField) Unwrap() *FormField {
	_tx, ok := ff.config.driver.(*txDriver)
	if !ok {
		panic("ent: FormField is not a transactional entity")
	}
	ff.config.driver = _tx.drv
	return ff
}

// String implements the fmt.Stringer.
func (ff *FormField) String() string {
	var builder strings.Builder
	builder.WriteString("FormField(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ff.ID))
	builder.WriteString("form_id=")
	builder.WriteString(ff.FormID)
	builder.WriteString(", ")
	builder.WriteString("field_type=")
	builder.WriteString(ff.FieldType)
	builder.WriteString(", ")
	builder.WriteString("field_name=")
	builder.WriteString(ff.FieldName)
	builder.WriteString(", ")
	builder.WriteString("order_index=")
	builder.WriteString(fmt.Sprintf("%v", ff.OrderIndex))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(ff.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(ff.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", ff.Disabled))
	builder.WriteByte(')')
	return builder.String()
}

// FormFields is a parsable slice of FormField.
type FormFields []*FormField
