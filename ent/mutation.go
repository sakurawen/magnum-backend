// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/form"
	"magnum/ent/formfield"
	"magnum/ent/formfieldconfig"
	"magnum/ent/formsubmission"
	"magnum/ent/formsubmissiondata"
	"magnum/ent/predicate"
	"magnum/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeForm               = "Form"
	TypeFormField          = "FormField"
	TypeFormFieldConfig    = "FormFieldConfig"
	TypeFormSubmission     = "FormSubmission"
	TypeFormSubmissionData = "FormSubmissionData"
	TypeUser               = "User"
)

// FormMutation represents an operation that mutates the Form nodes in the graph.
type FormMutation struct {
	config
	op            Op
	typ           string
	id            *string
	user_id       *string
	title         *string
	description   *string
	create_at     *time.Time
	update_at     *time.Time
	is_release    *int
	addis_release *int
	disabled      *int
	adddisabled   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Form, error)
	predicates    []predicate.Form
}

var _ ent.Mutation = (*FormMutation)(nil)

// formOption allows management of the mutation configuration using functional options.
type formOption func(*FormMutation)

// newFormMutation creates new mutation for the Form entity.
func newFormMutation(c config, op Op, opts ...formOption) *FormMutation {
	m := &FormMutation{
		config:        c,
		op:            op,
		typ:           TypeForm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormID sets the ID field of the mutation.
func withFormID(id string) formOption {
	return func(m *FormMutation) {
		var (
			err   error
			once  sync.Once
			value *Form
		)
		m.oldValue = func(ctx context.Context) (*Form, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Form.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForm sets the old Form of the mutation.
func withForm(node *Form) formOption {
	return func(m *FormMutation) {
		m.oldValue = func(context.Context) (*Form, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Form entities.
func (m *FormMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Form.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *FormMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *FormMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *FormMutation) ResetUserID() {
	m.user_id = nil
}

// SetTitle sets the "title" field.
func (m *FormMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FormMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FormMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *FormMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FormMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FormMutation) ResetDescription() {
	m.description = nil
}

// SetCreateAt sets the "create_at" field.
func (m *FormMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *FormMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *FormMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *FormMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *FormMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ClearUpdateAt clears the value of the "update_at" field.
func (m *FormMutation) ClearUpdateAt() {
	m.update_at = nil
	m.clearedFields[form.FieldUpdateAt] = struct{}{}
}

// UpdateAtCleared returns if the "update_at" field was cleared in this mutation.
func (m *FormMutation) UpdateAtCleared() bool {
	_, ok := m.clearedFields[form.FieldUpdateAt]
	return ok
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *FormMutation) ResetUpdateAt() {
	m.update_at = nil
	delete(m.clearedFields, form.FieldUpdateAt)
}

// SetIsRelease sets the "is_release" field.
func (m *FormMutation) SetIsRelease(i int) {
	m.is_release = &i
	m.addis_release = nil
}

// IsRelease returns the value of the "is_release" field in the mutation.
func (m *FormMutation) IsRelease() (r int, exists bool) {
	v := m.is_release
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRelease returns the old "is_release" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldIsRelease(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRelease is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRelease requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRelease: %w", err)
	}
	return oldValue.IsRelease, nil
}

// AddIsRelease adds i to the "is_release" field.
func (m *FormMutation) AddIsRelease(i int) {
	if m.addis_release != nil {
		*m.addis_release += i
	} else {
		m.addis_release = &i
	}
}

// AddedIsRelease returns the value that was added to the "is_release" field in this mutation.
func (m *FormMutation) AddedIsRelease() (r int, exists bool) {
	v := m.addis_release
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsRelease resets all changes to the "is_release" field.
func (m *FormMutation) ResetIsRelease() {
	m.is_release = nil
	m.addis_release = nil
}

// SetDisabled sets the "disabled" field.
func (m *FormMutation) SetDisabled(i int) {
	m.disabled = &i
	m.adddisabled = nil
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *FormMutation) Disabled() (r int, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldDisabled(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// AddDisabled adds i to the "disabled" field.
func (m *FormMutation) AddDisabled(i int) {
	if m.adddisabled != nil {
		*m.adddisabled += i
	} else {
		m.adddisabled = &i
	}
}

// AddedDisabled returns the value that was added to the "disabled" field in this mutation.
func (m *FormMutation) AddedDisabled() (r int, exists bool) {
	v := m.adddisabled
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *FormMutation) ResetDisabled() {
	m.disabled = nil
	m.adddisabled = nil
}

// Where appends a list predicates to the FormMutation builder.
func (m *FormMutation) Where(ps ...predicate.Form) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Form, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Form).
func (m *FormMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user_id != nil {
		fields = append(fields, form.FieldUserID)
	}
	if m.title != nil {
		fields = append(fields, form.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, form.FieldDescription)
	}
	if m.create_at != nil {
		fields = append(fields, form.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, form.FieldUpdateAt)
	}
	if m.is_release != nil {
		fields = append(fields, form.FieldIsRelease)
	}
	if m.disabled != nil {
		fields = append(fields, form.FieldDisabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case form.FieldUserID:
		return m.UserID()
	case form.FieldTitle:
		return m.Title()
	case form.FieldDescription:
		return m.Description()
	case form.FieldCreateAt:
		return m.CreateAt()
	case form.FieldUpdateAt:
		return m.UpdateAt()
	case form.FieldIsRelease:
		return m.IsRelease()
	case form.FieldDisabled:
		return m.Disabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case form.FieldUserID:
		return m.OldUserID(ctx)
	case form.FieldTitle:
		return m.OldTitle(ctx)
	case form.FieldDescription:
		return m.OldDescription(ctx)
	case form.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case form.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case form.FieldIsRelease:
		return m.OldIsRelease(ctx)
	case form.FieldDisabled:
		return m.OldDisabled(ctx)
	}
	return nil, fmt.Errorf("unknown Form field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormMutation) SetField(name string, value ent.Value) error {
	switch name {
	case form.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case form.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case form.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case form.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case form.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case form.FieldIsRelease:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRelease(v)
		return nil
	case form.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormMutation) AddedFields() []string {
	var fields []string
	if m.addis_release != nil {
		fields = append(fields, form.FieldIsRelease)
	}
	if m.adddisabled != nil {
		fields = append(fields, form.FieldDisabled)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case form.FieldIsRelease:
		return m.AddedIsRelease()
	case form.FieldDisabled:
		return m.AddedDisabled()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormMutation) AddField(name string, value ent.Value) error {
	switch name {
	case form.FieldIsRelease:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsRelease(v)
		return nil
	case form.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown Form numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(form.FieldUpdateAt) {
		fields = append(fields, form.FieldUpdateAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormMutation) ClearField(name string) error {
	switch name {
	case form.FieldUpdateAt:
		m.ClearUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown Form nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormMutation) ResetField(name string) error {
	switch name {
	case form.FieldUserID:
		m.ResetUserID()
		return nil
	case form.FieldTitle:
		m.ResetTitle()
		return nil
	case form.FieldDescription:
		m.ResetDescription()
		return nil
	case form.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case form.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case form.FieldIsRelease:
		m.ResetIsRelease()
		return nil
	case form.FieldDisabled:
		m.ResetDisabled()
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Form unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Form edge %s", name)
}

// FormFieldMutation represents an operation that mutates the FormField nodes in the graph.
type FormFieldMutation struct {
	config
	op             Op
	typ            string
	id             *string
	form_id        *string
	field_type     *string
	field_name     *string
	order_index    *int
	addorder_index *int
	create_at      *time.Time
	update_at      *time.Time
	disabled       *int
	adddisabled    *int
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*FormField, error)
	predicates     []predicate.FormField
}

var _ ent.Mutation = (*FormFieldMutation)(nil)

// formfieldOption allows management of the mutation configuration using functional options.
type formfieldOption func(*FormFieldMutation)

// newFormFieldMutation creates new mutation for the FormField entity.
func newFormFieldMutation(c config, op Op, opts ...formfieldOption) *FormFieldMutation {
	m := &FormFieldMutation{
		config:        c,
		op:            op,
		typ:           TypeFormField,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormFieldID sets the ID field of the mutation.
func withFormFieldID(id string) formfieldOption {
	return func(m *FormFieldMutation) {
		var (
			err   error
			once  sync.Once
			value *FormField
		)
		m.oldValue = func(ctx context.Context) (*FormField, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FormField.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFormField sets the old FormField of the mutation.
func withFormField(node *FormField) formfieldOption {
	return func(m *FormFieldMutation) {
		m.oldValue = func(context.Context) (*FormField, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormFieldMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormFieldMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FormField entities.
func (m *FormFieldMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormFieldMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormFieldMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FormField.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormID sets the "form_id" field.
func (m *FormFieldMutation) SetFormID(s string) {
	m.form_id = &s
}

// FormID returns the value of the "form_id" field in the mutation.
func (m *FormFieldMutation) FormID() (r string, exists bool) {
	v := m.form_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFormID returns the old "form_id" field's value of the FormField entity.
// If the FormField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldMutation) OldFormID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormID: %w", err)
	}
	return oldValue.FormID, nil
}

// ResetFormID resets all changes to the "form_id" field.
func (m *FormFieldMutation) ResetFormID() {
	m.form_id = nil
}

// SetFieldType sets the "field_type" field.
func (m *FormFieldMutation) SetFieldType(s string) {
	m.field_type = &s
}

// FieldType returns the value of the "field_type" field in the mutation.
func (m *FormFieldMutation) FieldType() (r string, exists bool) {
	v := m.field_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFieldType returns the old "field_type" field's value of the FormField entity.
// If the FormField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldMutation) OldFieldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFieldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFieldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFieldType: %w", err)
	}
	return oldValue.FieldType, nil
}

// ResetFieldType resets all changes to the "field_type" field.
func (m *FormFieldMutation) ResetFieldType() {
	m.field_type = nil
}

// SetFieldName sets the "field_name" field.
func (m *FormFieldMutation) SetFieldName(s string) {
	m.field_name = &s
}

// FieldName returns the value of the "field_name" field in the mutation.
func (m *FormFieldMutation) FieldName() (r string, exists bool) {
	v := m.field_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFieldName returns the old "field_name" field's value of the FormField entity.
// If the FormField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldMutation) OldFieldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFieldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFieldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFieldName: %w", err)
	}
	return oldValue.FieldName, nil
}

// ResetFieldName resets all changes to the "field_name" field.
func (m *FormFieldMutation) ResetFieldName() {
	m.field_name = nil
}

// SetOrderIndex sets the "order_index" field.
func (m *FormFieldMutation) SetOrderIndex(i int) {
	m.order_index = &i
	m.addorder_index = nil
}

// OrderIndex returns the value of the "order_index" field in the mutation.
func (m *FormFieldMutation) OrderIndex() (r int, exists bool) {
	v := m.order_index
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderIndex returns the old "order_index" field's value of the FormField entity.
// If the FormField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldMutation) OldOrderIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderIndex: %w", err)
	}
	return oldValue.OrderIndex, nil
}

// AddOrderIndex adds i to the "order_index" field.
func (m *FormFieldMutation) AddOrderIndex(i int) {
	if m.addorder_index != nil {
		*m.addorder_index += i
	} else {
		m.addorder_index = &i
	}
}

// AddedOrderIndex returns the value that was added to the "order_index" field in this mutation.
func (m *FormFieldMutation) AddedOrderIndex() (r int, exists bool) {
	v := m.addorder_index
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderIndex clears the value of the "order_index" field.
func (m *FormFieldMutation) ClearOrderIndex() {
	m.order_index = nil
	m.addorder_index = nil
	m.clearedFields[formfield.FieldOrderIndex] = struct{}{}
}

// OrderIndexCleared returns if the "order_index" field was cleared in this mutation.
func (m *FormFieldMutation) OrderIndexCleared() bool {
	_, ok := m.clearedFields[formfield.FieldOrderIndex]
	return ok
}

// ResetOrderIndex resets all changes to the "order_index" field.
func (m *FormFieldMutation) ResetOrderIndex() {
	m.order_index = nil
	m.addorder_index = nil
	delete(m.clearedFields, formfield.FieldOrderIndex)
}

// SetCreateAt sets the "create_at" field.
func (m *FormFieldMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *FormFieldMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the FormField entity.
// If the FormField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *FormFieldMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *FormFieldMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *FormFieldMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the FormField entity.
// If the FormField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ClearUpdateAt clears the value of the "update_at" field.
func (m *FormFieldMutation) ClearUpdateAt() {
	m.update_at = nil
	m.clearedFields[formfield.FieldUpdateAt] = struct{}{}
}

// UpdateAtCleared returns if the "update_at" field was cleared in this mutation.
func (m *FormFieldMutation) UpdateAtCleared() bool {
	_, ok := m.clearedFields[formfield.FieldUpdateAt]
	return ok
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *FormFieldMutation) ResetUpdateAt() {
	m.update_at = nil
	delete(m.clearedFields, formfield.FieldUpdateAt)
}

// SetDisabled sets the "disabled" field.
func (m *FormFieldMutation) SetDisabled(i int) {
	m.disabled = &i
	m.adddisabled = nil
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *FormFieldMutation) Disabled() (r int, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the FormField entity.
// If the FormField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldMutation) OldDisabled(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// AddDisabled adds i to the "disabled" field.
func (m *FormFieldMutation) AddDisabled(i int) {
	if m.adddisabled != nil {
		*m.adddisabled += i
	} else {
		m.adddisabled = &i
	}
}

// AddedDisabled returns the value that was added to the "disabled" field in this mutation.
func (m *FormFieldMutation) AddedDisabled() (r int, exists bool) {
	v := m.adddisabled
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *FormFieldMutation) ResetDisabled() {
	m.disabled = nil
	m.adddisabled = nil
}

// Where appends a list predicates to the FormFieldMutation builder.
func (m *FormFieldMutation) Where(ps ...predicate.FormField) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormFieldMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormFieldMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FormField, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormFieldMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormFieldMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FormField).
func (m *FormFieldMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormFieldMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.form_id != nil {
		fields = append(fields, formfield.FieldFormID)
	}
	if m.field_type != nil {
		fields = append(fields, formfield.FieldFieldType)
	}
	if m.field_name != nil {
		fields = append(fields, formfield.FieldFieldName)
	}
	if m.order_index != nil {
		fields = append(fields, formfield.FieldOrderIndex)
	}
	if m.create_at != nil {
		fields = append(fields, formfield.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, formfield.FieldUpdateAt)
	}
	if m.disabled != nil {
		fields = append(fields, formfield.FieldDisabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormFieldMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case formfield.FieldFormID:
		return m.FormID()
	case formfield.FieldFieldType:
		return m.FieldType()
	case formfield.FieldFieldName:
		return m.FieldName()
	case formfield.FieldOrderIndex:
		return m.OrderIndex()
	case formfield.FieldCreateAt:
		return m.CreateAt()
	case formfield.FieldUpdateAt:
		return m.UpdateAt()
	case formfield.FieldDisabled:
		return m.Disabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormFieldMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case formfield.FieldFormID:
		return m.OldFormID(ctx)
	case formfield.FieldFieldType:
		return m.OldFieldType(ctx)
	case formfield.FieldFieldName:
		return m.OldFieldName(ctx)
	case formfield.FieldOrderIndex:
		return m.OldOrderIndex(ctx)
	case formfield.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case formfield.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case formfield.FieldDisabled:
		return m.OldDisabled(ctx)
	}
	return nil, fmt.Errorf("unknown FormField field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormFieldMutation) SetField(name string, value ent.Value) error {
	switch name {
	case formfield.FieldFormID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormID(v)
		return nil
	case formfield.FieldFieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFieldType(v)
		return nil
	case formfield.FieldFieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFieldName(v)
		return nil
	case formfield.FieldOrderIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderIndex(v)
		return nil
	case formfield.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case formfield.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case formfield.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown FormField field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormFieldMutation) AddedFields() []string {
	var fields []string
	if m.addorder_index != nil {
		fields = append(fields, formfield.FieldOrderIndex)
	}
	if m.adddisabled != nil {
		fields = append(fields, formfield.FieldDisabled)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormFieldMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case formfield.FieldOrderIndex:
		return m.AddedOrderIndex()
	case formfield.FieldDisabled:
		return m.AddedDisabled()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormFieldMutation) AddField(name string, value ent.Value) error {
	switch name {
	case formfield.FieldOrderIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderIndex(v)
		return nil
	case formfield.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown FormField numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormFieldMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(formfield.FieldOrderIndex) {
		fields = append(fields, formfield.FieldOrderIndex)
	}
	if m.FieldCleared(formfield.FieldUpdateAt) {
		fields = append(fields, formfield.FieldUpdateAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormFieldMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormFieldMutation) ClearField(name string) error {
	switch name {
	case formfield.FieldOrderIndex:
		m.ClearOrderIndex()
		return nil
	case formfield.FieldUpdateAt:
		m.ClearUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown FormField nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormFieldMutation) ResetField(name string) error {
	switch name {
	case formfield.FieldFormID:
		m.ResetFormID()
		return nil
	case formfield.FieldFieldType:
		m.ResetFieldType()
		return nil
	case formfield.FieldFieldName:
		m.ResetFieldName()
		return nil
	case formfield.FieldOrderIndex:
		m.ResetOrderIndex()
		return nil
	case formfield.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case formfield.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case formfield.FieldDisabled:
		m.ResetDisabled()
		return nil
	}
	return fmt.Errorf("unknown FormField field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormFieldMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormFieldMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormFieldMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormFieldMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormFieldMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormFieldMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormFieldMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FormField unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormFieldMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FormField edge %s", name)
}

// FormFieldConfigMutation represents an operation that mutates the FormFieldConfig nodes in the graph.
type FormFieldConfigMutation struct {
	config
	op                Op
	typ               string
	id                *string
	field_id          *string
	form_id           *string
	key               *string
	_type             *string
	value             *string
	json_string_value *string
	text              *string
	order_index       *int
	addorder_index    *int
	disabled          *int
	adddisabled       *int
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*FormFieldConfig, error)
	predicates        []predicate.FormFieldConfig
}

var _ ent.Mutation = (*FormFieldConfigMutation)(nil)

// formfieldconfigOption allows management of the mutation configuration using functional options.
type formfieldconfigOption func(*FormFieldConfigMutation)

// newFormFieldConfigMutation creates new mutation for the FormFieldConfig entity.
func newFormFieldConfigMutation(c config, op Op, opts ...formfieldconfigOption) *FormFieldConfigMutation {
	m := &FormFieldConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeFormFieldConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormFieldConfigID sets the ID field of the mutation.
func withFormFieldConfigID(id string) formfieldconfigOption {
	return func(m *FormFieldConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *FormFieldConfig
		)
		m.oldValue = func(ctx context.Context) (*FormFieldConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FormFieldConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFormFieldConfig sets the old FormFieldConfig of the mutation.
func withFormFieldConfig(node *FormFieldConfig) formfieldconfigOption {
	return func(m *FormFieldConfigMutation) {
		m.oldValue = func(context.Context) (*FormFieldConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormFieldConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormFieldConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FormFieldConfig entities.
func (m *FormFieldConfigMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormFieldConfigMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormFieldConfigMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FormFieldConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFieldID sets the "field_id" field.
func (m *FormFieldConfigMutation) SetFieldID(s string) {
	m.field_id = &s
}

// FieldID returns the value of the "field_id" field in the mutation.
func (m *FormFieldConfigMutation) FieldID() (r string, exists bool) {
	v := m.field_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFieldID returns the old "field_id" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldFieldID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFieldID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFieldID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFieldID: %w", err)
	}
	return oldValue.FieldID, nil
}

// ResetFieldID resets all changes to the "field_id" field.
func (m *FormFieldConfigMutation) ResetFieldID() {
	m.field_id = nil
}

// SetFormID sets the "form_id" field.
func (m *FormFieldConfigMutation) SetFormID(s string) {
	m.form_id = &s
}

// FormID returns the value of the "form_id" field in the mutation.
func (m *FormFieldConfigMutation) FormID() (r string, exists bool) {
	v := m.form_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFormID returns the old "form_id" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldFormID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormID: %w", err)
	}
	return oldValue.FormID, nil
}

// ResetFormID resets all changes to the "form_id" field.
func (m *FormFieldConfigMutation) ResetFormID() {
	m.form_id = nil
}

// SetKey sets the "key" field.
func (m *FormFieldConfigMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *FormFieldConfigMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *FormFieldConfigMutation) ResetKey() {
	m.key = nil
}

// SetType sets the "type" field.
func (m *FormFieldConfigMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *FormFieldConfigMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *FormFieldConfigMutation) ResetType() {
	m._type = nil
}

// SetValue sets the "value" field.
func (m *FormFieldConfigMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *FormFieldConfigMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *FormFieldConfigMutation) ResetValue() {
	m.value = nil
}

// SetJSONStringValue sets the "json_string_value" field.
func (m *FormFieldConfigMutation) SetJSONStringValue(s string) {
	m.json_string_value = &s
}

// JSONStringValue returns the value of the "json_string_value" field in the mutation.
func (m *FormFieldConfigMutation) JSONStringValue() (r string, exists bool) {
	v := m.json_string_value
	if v == nil {
		return
	}
	return *v, true
}

// OldJSONStringValue returns the old "json_string_value" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldJSONStringValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJSONStringValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJSONStringValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJSONStringValue: %w", err)
	}
	return oldValue.JSONStringValue, nil
}

// ClearJSONStringValue clears the value of the "json_string_value" field.
func (m *FormFieldConfigMutation) ClearJSONStringValue() {
	m.json_string_value = nil
	m.clearedFields[formfieldconfig.FieldJSONStringValue] = struct{}{}
}

// JSONStringValueCleared returns if the "json_string_value" field was cleared in this mutation.
func (m *FormFieldConfigMutation) JSONStringValueCleared() bool {
	_, ok := m.clearedFields[formfieldconfig.FieldJSONStringValue]
	return ok
}

// ResetJSONStringValue resets all changes to the "json_string_value" field.
func (m *FormFieldConfigMutation) ResetJSONStringValue() {
	m.json_string_value = nil
	delete(m.clearedFields, formfieldconfig.FieldJSONStringValue)
}

// SetText sets the "text" field.
func (m *FormFieldConfigMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *FormFieldConfigMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *FormFieldConfigMutation) ResetText() {
	m.text = nil
}

// SetOrderIndex sets the "order_index" field.
func (m *FormFieldConfigMutation) SetOrderIndex(i int) {
	m.order_index = &i
	m.addorder_index = nil
}

// OrderIndex returns the value of the "order_index" field in the mutation.
func (m *FormFieldConfigMutation) OrderIndex() (r int, exists bool) {
	v := m.order_index
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderIndex returns the old "order_index" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldOrderIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderIndex: %w", err)
	}
	return oldValue.OrderIndex, nil
}

// AddOrderIndex adds i to the "order_index" field.
func (m *FormFieldConfigMutation) AddOrderIndex(i int) {
	if m.addorder_index != nil {
		*m.addorder_index += i
	} else {
		m.addorder_index = &i
	}
}

// AddedOrderIndex returns the value that was added to the "order_index" field in this mutation.
func (m *FormFieldConfigMutation) AddedOrderIndex() (r int, exists bool) {
	v := m.addorder_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderIndex resets all changes to the "order_index" field.
func (m *FormFieldConfigMutation) ResetOrderIndex() {
	m.order_index = nil
	m.addorder_index = nil
}

// SetDisabled sets the "disabled" field.
func (m *FormFieldConfigMutation) SetDisabled(i int) {
	m.disabled = &i
	m.adddisabled = nil
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *FormFieldConfigMutation) Disabled() (r int, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the FormFieldConfig entity.
// If the FormFieldConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormFieldConfigMutation) OldDisabled(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// AddDisabled adds i to the "disabled" field.
func (m *FormFieldConfigMutation) AddDisabled(i int) {
	if m.adddisabled != nil {
		*m.adddisabled += i
	} else {
		m.adddisabled = &i
	}
}

// AddedDisabled returns the value that was added to the "disabled" field in this mutation.
func (m *FormFieldConfigMutation) AddedDisabled() (r int, exists bool) {
	v := m.adddisabled
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *FormFieldConfigMutation) ResetDisabled() {
	m.disabled = nil
	m.adddisabled = nil
}

// Where appends a list predicates to the FormFieldConfigMutation builder.
func (m *FormFieldConfigMutation) Where(ps ...predicate.FormFieldConfig) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormFieldConfigMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormFieldConfigMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FormFieldConfig, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormFieldConfigMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormFieldConfigMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FormFieldConfig).
func (m *FormFieldConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormFieldConfigMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.field_id != nil {
		fields = append(fields, formfieldconfig.FieldFieldID)
	}
	if m.form_id != nil {
		fields = append(fields, formfieldconfig.FieldFormID)
	}
	if m.key != nil {
		fields = append(fields, formfieldconfig.FieldKey)
	}
	if m._type != nil {
		fields = append(fields, formfieldconfig.FieldType)
	}
	if m.value != nil {
		fields = append(fields, formfieldconfig.FieldValue)
	}
	if m.json_string_value != nil {
		fields = append(fields, formfieldconfig.FieldJSONStringValue)
	}
	if m.text != nil {
		fields = append(fields, formfieldconfig.FieldText)
	}
	if m.order_index != nil {
		fields = append(fields, formfieldconfig.FieldOrderIndex)
	}
	if m.disabled != nil {
		fields = append(fields, formfieldconfig.FieldDisabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormFieldConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case formfieldconfig.FieldFieldID:
		return m.FieldID()
	case formfieldconfig.FieldFormID:
		return m.FormID()
	case formfieldconfig.FieldKey:
		return m.Key()
	case formfieldconfig.FieldType:
		return m.GetType()
	case formfieldconfig.FieldValue:
		return m.Value()
	case formfieldconfig.FieldJSONStringValue:
		return m.JSONStringValue()
	case formfieldconfig.FieldText:
		return m.Text()
	case formfieldconfig.FieldOrderIndex:
		return m.OrderIndex()
	case formfieldconfig.FieldDisabled:
		return m.Disabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormFieldConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case formfieldconfig.FieldFieldID:
		return m.OldFieldID(ctx)
	case formfieldconfig.FieldFormID:
		return m.OldFormID(ctx)
	case formfieldconfig.FieldKey:
		return m.OldKey(ctx)
	case formfieldconfig.FieldType:
		return m.OldType(ctx)
	case formfieldconfig.FieldValue:
		return m.OldValue(ctx)
	case formfieldconfig.FieldJSONStringValue:
		return m.OldJSONStringValue(ctx)
	case formfieldconfig.FieldText:
		return m.OldText(ctx)
	case formfieldconfig.FieldOrderIndex:
		return m.OldOrderIndex(ctx)
	case formfieldconfig.FieldDisabled:
		return m.OldDisabled(ctx)
	}
	return nil, fmt.Errorf("unknown FormFieldConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormFieldConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case formfieldconfig.FieldFieldID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFieldID(v)
		return nil
	case formfieldconfig.FieldFormID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormID(v)
		return nil
	case formfieldconfig.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case formfieldconfig.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case formfieldconfig.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case formfieldconfig.FieldJSONStringValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJSONStringValue(v)
		return nil
	case formfieldconfig.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case formfieldconfig.FieldOrderIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderIndex(v)
		return nil
	case formfieldconfig.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown FormFieldConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormFieldConfigMutation) AddedFields() []string {
	var fields []string
	if m.addorder_index != nil {
		fields = append(fields, formfieldconfig.FieldOrderIndex)
	}
	if m.adddisabled != nil {
		fields = append(fields, formfieldconfig.FieldDisabled)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormFieldConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case formfieldconfig.FieldOrderIndex:
		return m.AddedOrderIndex()
	case formfieldconfig.FieldDisabled:
		return m.AddedDisabled()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormFieldConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case formfieldconfig.FieldOrderIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderIndex(v)
		return nil
	case formfieldconfig.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown FormFieldConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormFieldConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(formfieldconfig.FieldJSONStringValue) {
		fields = append(fields, formfieldconfig.FieldJSONStringValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormFieldConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormFieldConfigMutation) ClearField(name string) error {
	switch name {
	case formfieldconfig.FieldJSONStringValue:
		m.ClearJSONStringValue()
		return nil
	}
	return fmt.Errorf("unknown FormFieldConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormFieldConfigMutation) ResetField(name string) error {
	switch name {
	case formfieldconfig.FieldFieldID:
		m.ResetFieldID()
		return nil
	case formfieldconfig.FieldFormID:
		m.ResetFormID()
		return nil
	case formfieldconfig.FieldKey:
		m.ResetKey()
		return nil
	case formfieldconfig.FieldType:
		m.ResetType()
		return nil
	case formfieldconfig.FieldValue:
		m.ResetValue()
		return nil
	case formfieldconfig.FieldJSONStringValue:
		m.ResetJSONStringValue()
		return nil
	case formfieldconfig.FieldText:
		m.ResetText()
		return nil
	case formfieldconfig.FieldOrderIndex:
		m.ResetOrderIndex()
		return nil
	case formfieldconfig.FieldDisabled:
		m.ResetDisabled()
		return nil
	}
	return fmt.Errorf("unknown FormFieldConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormFieldConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormFieldConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormFieldConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormFieldConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormFieldConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormFieldConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormFieldConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FormFieldConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormFieldConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FormFieldConfig edge %s", name)
}

// FormSubmissionMutation represents an operation that mutates the FormSubmission nodes in the graph.
type FormSubmissionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	form_id       *string
	user_id       *string
	create_at     *time.Time
	is_deleted    *int
	addis_deleted *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FormSubmission, error)
	predicates    []predicate.FormSubmission
}

var _ ent.Mutation = (*FormSubmissionMutation)(nil)

// formsubmissionOption allows management of the mutation configuration using functional options.
type formsubmissionOption func(*FormSubmissionMutation)

// newFormSubmissionMutation creates new mutation for the FormSubmission entity.
func newFormSubmissionMutation(c config, op Op, opts ...formsubmissionOption) *FormSubmissionMutation {
	m := &FormSubmissionMutation{
		config:        c,
		op:            op,
		typ:           TypeFormSubmission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormSubmissionID sets the ID field of the mutation.
func withFormSubmissionID(id string) formsubmissionOption {
	return func(m *FormSubmissionMutation) {
		var (
			err   error
			once  sync.Once
			value *FormSubmission
		)
		m.oldValue = func(ctx context.Context) (*FormSubmission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FormSubmission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFormSubmission sets the old FormSubmission of the mutation.
func withFormSubmission(node *FormSubmission) formsubmissionOption {
	return func(m *FormSubmissionMutation) {
		m.oldValue = func(context.Context) (*FormSubmission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormSubmissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormSubmissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FormSubmission entities.
func (m *FormSubmissionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormSubmissionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormSubmissionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FormSubmission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormID sets the "form_id" field.
func (m *FormSubmissionMutation) SetFormID(s string) {
	m.form_id = &s
}

// FormID returns the value of the "form_id" field in the mutation.
func (m *FormSubmissionMutation) FormID() (r string, exists bool) {
	v := m.form_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFormID returns the old "form_id" field's value of the FormSubmission entity.
// If the FormSubmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionMutation) OldFormID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormID: %w", err)
	}
	return oldValue.FormID, nil
}

// ResetFormID resets all changes to the "form_id" field.
func (m *FormSubmissionMutation) ResetFormID() {
	m.form_id = nil
}

// SetUserID sets the "user_id" field.
func (m *FormSubmissionMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *FormSubmissionMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the FormSubmission entity.
// If the FormSubmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *FormSubmissionMutation) ResetUserID() {
	m.user_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *FormSubmissionMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *FormSubmissionMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the FormSubmission entity.
// If the FormSubmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *FormSubmissionMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *FormSubmissionMutation) SetIsDeleted(i int) {
	m.is_deleted = &i
	m.addis_deleted = nil
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *FormSubmissionMutation) IsDeleted() (r int, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the FormSubmission entity.
// If the FormSubmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionMutation) OldIsDeleted(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// AddIsDeleted adds i to the "is_deleted" field.
func (m *FormSubmissionMutation) AddIsDeleted(i int) {
	if m.addis_deleted != nil {
		*m.addis_deleted += i
	} else {
		m.addis_deleted = &i
	}
}

// AddedIsDeleted returns the value that was added to the "is_deleted" field in this mutation.
func (m *FormSubmissionMutation) AddedIsDeleted() (r int, exists bool) {
	v := m.addis_deleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *FormSubmissionMutation) ResetIsDeleted() {
	m.is_deleted = nil
	m.addis_deleted = nil
}

// Where appends a list predicates to the FormSubmissionMutation builder.
func (m *FormSubmissionMutation) Where(ps ...predicate.FormSubmission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormSubmissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormSubmissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FormSubmission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormSubmissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormSubmissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FormSubmission).
func (m *FormSubmissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormSubmissionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.form_id != nil {
		fields = append(fields, formsubmission.FieldFormID)
	}
	if m.user_id != nil {
		fields = append(fields, formsubmission.FieldUserID)
	}
	if m.create_at != nil {
		fields = append(fields, formsubmission.FieldCreateAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, formsubmission.FieldIsDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormSubmissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case formsubmission.FieldFormID:
		return m.FormID()
	case formsubmission.FieldUserID:
		return m.UserID()
	case formsubmission.FieldCreateAt:
		return m.CreateAt()
	case formsubmission.FieldIsDeleted:
		return m.IsDeleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormSubmissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case formsubmission.FieldFormID:
		return m.OldFormID(ctx)
	case formsubmission.FieldUserID:
		return m.OldUserID(ctx)
	case formsubmission.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case formsubmission.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown FormSubmission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormSubmissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case formsubmission.FieldFormID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormID(v)
		return nil
	case formsubmission.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case formsubmission.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case formsubmission.FieldIsDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown FormSubmission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormSubmissionMutation) AddedFields() []string {
	var fields []string
	if m.addis_deleted != nil {
		fields = append(fields, formsubmission.FieldIsDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormSubmissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case formsubmission.FieldIsDeleted:
		return m.AddedIsDeleted()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormSubmissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case formsubmission.FieldIsDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown FormSubmission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormSubmissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormSubmissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormSubmissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FormSubmission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormSubmissionMutation) ResetField(name string) error {
	switch name {
	case formsubmission.FieldFormID:
		m.ResetFormID()
		return nil
	case formsubmission.FieldUserID:
		m.ResetUserID()
		return nil
	case formsubmission.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case formsubmission.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	}
	return fmt.Errorf("unknown FormSubmission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormSubmissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormSubmissionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormSubmissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormSubmissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormSubmissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormSubmissionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormSubmissionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FormSubmission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormSubmissionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FormSubmission edge %s", name)
}

// FormSubmissionDataMutation represents an operation that mutates the FormSubmissionData nodes in the graph.
type FormSubmissionDataMutation struct {
	config
	op            Op
	typ           string
	id            *string
	submission_id *string
	field_id      *string
	field_value   *string
	create_at     *time.Time
	is_deleted    *int
	addis_deleted *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FormSubmissionData, error)
	predicates    []predicate.FormSubmissionData
}

var _ ent.Mutation = (*FormSubmissionDataMutation)(nil)

// formsubmissiondataOption allows management of the mutation configuration using functional options.
type formsubmissiondataOption func(*FormSubmissionDataMutation)

// newFormSubmissionDataMutation creates new mutation for the FormSubmissionData entity.
func newFormSubmissionDataMutation(c config, op Op, opts ...formsubmissiondataOption) *FormSubmissionDataMutation {
	m := &FormSubmissionDataMutation{
		config:        c,
		op:            op,
		typ:           TypeFormSubmissionData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormSubmissionDataID sets the ID field of the mutation.
func withFormSubmissionDataID(id string) formsubmissiondataOption {
	return func(m *FormSubmissionDataMutation) {
		var (
			err   error
			once  sync.Once
			value *FormSubmissionData
		)
		m.oldValue = func(ctx context.Context) (*FormSubmissionData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FormSubmissionData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFormSubmissionData sets the old FormSubmissionData of the mutation.
func withFormSubmissionData(node *FormSubmissionData) formsubmissiondataOption {
	return func(m *FormSubmissionDataMutation) {
		m.oldValue = func(context.Context) (*FormSubmissionData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormSubmissionDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormSubmissionDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FormSubmissionData entities.
func (m *FormSubmissionDataMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormSubmissionDataMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormSubmissionDataMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FormSubmissionData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSubmissionID sets the "submission_id" field.
func (m *FormSubmissionDataMutation) SetSubmissionID(s string) {
	m.submission_id = &s
}

// SubmissionID returns the value of the "submission_id" field in the mutation.
func (m *FormSubmissionDataMutation) SubmissionID() (r string, exists bool) {
	v := m.submission_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionID returns the old "submission_id" field's value of the FormSubmissionData entity.
// If the FormSubmissionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionDataMutation) OldSubmissionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionID: %w", err)
	}
	return oldValue.SubmissionID, nil
}

// ResetSubmissionID resets all changes to the "submission_id" field.
func (m *FormSubmissionDataMutation) ResetSubmissionID() {
	m.submission_id = nil
}

// SetFieldID sets the "field_id" field.
func (m *FormSubmissionDataMutation) SetFieldID(s string) {
	m.field_id = &s
}

// FieldID returns the value of the "field_id" field in the mutation.
func (m *FormSubmissionDataMutation) FieldID() (r string, exists bool) {
	v := m.field_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFieldID returns the old "field_id" field's value of the FormSubmissionData entity.
// If the FormSubmissionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionDataMutation) OldFieldID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFieldID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFieldID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFieldID: %w", err)
	}
	return oldValue.FieldID, nil
}

// ResetFieldID resets all changes to the "field_id" field.
func (m *FormSubmissionDataMutation) ResetFieldID() {
	m.field_id = nil
}

// SetFieldValue sets the "field_value" field.
func (m *FormSubmissionDataMutation) SetFieldValue(s string) {
	m.field_value = &s
}

// FieldValue returns the value of the "field_value" field in the mutation.
func (m *FormSubmissionDataMutation) FieldValue() (r string, exists bool) {
	v := m.field_value
	if v == nil {
		return
	}
	return *v, true
}

// OldFieldValue returns the old "field_value" field's value of the FormSubmissionData entity.
// If the FormSubmissionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionDataMutation) OldFieldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFieldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFieldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFieldValue: %w", err)
	}
	return oldValue.FieldValue, nil
}

// ResetFieldValue resets all changes to the "field_value" field.
func (m *FormSubmissionDataMutation) ResetFieldValue() {
	m.field_value = nil
}

// SetCreateAt sets the "create_at" field.
func (m *FormSubmissionDataMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *FormSubmissionDataMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the FormSubmissionData entity.
// If the FormSubmissionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionDataMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *FormSubmissionDataMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *FormSubmissionDataMutation) SetIsDeleted(i int) {
	m.is_deleted = &i
	m.addis_deleted = nil
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *FormSubmissionDataMutation) IsDeleted() (r int, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the FormSubmissionData entity.
// If the FormSubmissionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSubmissionDataMutation) OldIsDeleted(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// AddIsDeleted adds i to the "is_deleted" field.
func (m *FormSubmissionDataMutation) AddIsDeleted(i int) {
	if m.addis_deleted != nil {
		*m.addis_deleted += i
	} else {
		m.addis_deleted = &i
	}
}

// AddedIsDeleted returns the value that was added to the "is_deleted" field in this mutation.
func (m *FormSubmissionDataMutation) AddedIsDeleted() (r int, exists bool) {
	v := m.addis_deleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *FormSubmissionDataMutation) ResetIsDeleted() {
	m.is_deleted = nil
	m.addis_deleted = nil
}

// Where appends a list predicates to the FormSubmissionDataMutation builder.
func (m *FormSubmissionDataMutation) Where(ps ...predicate.FormSubmissionData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormSubmissionDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormSubmissionDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FormSubmissionData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormSubmissionDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormSubmissionDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FormSubmissionData).
func (m *FormSubmissionDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormSubmissionDataMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.submission_id != nil {
		fields = append(fields, formsubmissiondata.FieldSubmissionID)
	}
	if m.field_id != nil {
		fields = append(fields, formsubmissiondata.FieldFieldID)
	}
	if m.field_value != nil {
		fields = append(fields, formsubmissiondata.FieldFieldValue)
	}
	if m.create_at != nil {
		fields = append(fields, formsubmissiondata.FieldCreateAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, formsubmissiondata.FieldIsDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormSubmissionDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case formsubmissiondata.FieldSubmissionID:
		return m.SubmissionID()
	case formsubmissiondata.FieldFieldID:
		return m.FieldID()
	case formsubmissiondata.FieldFieldValue:
		return m.FieldValue()
	case formsubmissiondata.FieldCreateAt:
		return m.CreateAt()
	case formsubmissiondata.FieldIsDeleted:
		return m.IsDeleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormSubmissionDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case formsubmissiondata.FieldSubmissionID:
		return m.OldSubmissionID(ctx)
	case formsubmissiondata.FieldFieldID:
		return m.OldFieldID(ctx)
	case formsubmissiondata.FieldFieldValue:
		return m.OldFieldValue(ctx)
	case formsubmissiondata.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case formsubmissiondata.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown FormSubmissionData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormSubmissionDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case formsubmissiondata.FieldSubmissionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionID(v)
		return nil
	case formsubmissiondata.FieldFieldID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFieldID(v)
		return nil
	case formsubmissiondata.FieldFieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFieldValue(v)
		return nil
	case formsubmissiondata.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case formsubmissiondata.FieldIsDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown FormSubmissionData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormSubmissionDataMutation) AddedFields() []string {
	var fields []string
	if m.addis_deleted != nil {
		fields = append(fields, formsubmissiondata.FieldIsDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormSubmissionDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case formsubmissiondata.FieldIsDeleted:
		return m.AddedIsDeleted()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormSubmissionDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case formsubmissiondata.FieldIsDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown FormSubmissionData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormSubmissionDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormSubmissionDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormSubmissionDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FormSubmissionData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormSubmissionDataMutation) ResetField(name string) error {
	switch name {
	case formsubmissiondata.FieldSubmissionID:
		m.ResetSubmissionID()
		return nil
	case formsubmissiondata.FieldFieldID:
		m.ResetFieldID()
		return nil
	case formsubmissiondata.FieldFieldValue:
		m.ResetFieldValue()
		return nil
	case formsubmissiondata.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case formsubmissiondata.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	}
	return fmt.Errorf("unknown FormSubmissionData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormSubmissionDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormSubmissionDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormSubmissionDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormSubmissionDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormSubmissionDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormSubmissionDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormSubmissionDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FormSubmissionData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormSubmissionDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FormSubmissionData edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	password      *string
	username      *string
	phone         *string
	role          *string
	account       *string
	disabled      *int
	adddisabled   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetAccount sets the "account" field.
func (m *UserMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *UserMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *UserMutation) ResetAccount() {
	m.account = nil
}

// SetDisabled sets the "disabled" field.
func (m *UserMutation) SetDisabled(i int) {
	m.disabled = &i
	m.adddisabled = nil
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *UserMutation) Disabled() (r int, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDisabled(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// AddDisabled adds i to the "disabled" field.
func (m *UserMutation) AddDisabled(i int) {
	if m.adddisabled != nil {
		*m.adddisabled += i
	} else {
		m.adddisabled = &i
	}
}

// AddedDisabled returns the value that was added to the "disabled" field in this mutation.
func (m *UserMutation) AddedDisabled() (r int, exists bool) {
	v := m.adddisabled
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *UserMutation) ResetDisabled() {
	m.disabled = nil
	m.adddisabled = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.account != nil {
		fields = append(fields, user.FieldAccount)
	}
	if m.disabled != nil {
		fields = append(fields, user.FieldDisabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPassword:
		return m.Password()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldRole:
		return m.Role()
	case user.FieldAccount:
		return m.Account()
	case user.FieldDisabled:
		return m.Disabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldAccount:
		return m.OldAccount(ctx)
	case user.FieldDisabled:
		return m.OldDisabled(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case user.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.adddisabled != nil {
		fields = append(fields, user.FieldDisabled)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDisabled:
		return m.AddedDisabled()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldDisabled:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldAccount:
		m.ResetAccount()
		return nil
	case user.FieldDisabled:
		m.ResetDisabled()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
