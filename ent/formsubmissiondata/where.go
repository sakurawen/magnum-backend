// Code generated by ent, DO NOT EDIT.

package formsubmissiondata

import (
	"magnum/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLTE(FieldID, id))
}

// SubmissionID applies equality check predicate on the "submission_id" field. It's identical to SubmissionIDEQ.
func SubmissionID(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldSubmissionID, v))
}

// FieldValue applies equality check predicate on the "field_value" field. It's identical to FieldValueEQ.
func FieldValue(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldFieldValue, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldCreateAt, v))
}

// SubmissionIDEQ applies the EQ predicate on the "submission_id" field.
func SubmissionIDEQ(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldSubmissionID, v))
}

// SubmissionIDNEQ applies the NEQ predicate on the "submission_id" field.
func SubmissionIDNEQ(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNEQ(FieldSubmissionID, v))
}

// SubmissionIDIn applies the In predicate on the "submission_id" field.
func SubmissionIDIn(vs ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldIn(FieldSubmissionID, vs...))
}

// SubmissionIDNotIn applies the NotIn predicate on the "submission_id" field.
func SubmissionIDNotIn(vs ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNotIn(FieldSubmissionID, vs...))
}

// SubmissionIDGT applies the GT predicate on the "submission_id" field.
func SubmissionIDGT(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGT(FieldSubmissionID, v))
}

// SubmissionIDGTE applies the GTE predicate on the "submission_id" field.
func SubmissionIDGTE(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGTE(FieldSubmissionID, v))
}

// SubmissionIDLT applies the LT predicate on the "submission_id" field.
func SubmissionIDLT(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLT(FieldSubmissionID, v))
}

// SubmissionIDLTE applies the LTE predicate on the "submission_id" field.
func SubmissionIDLTE(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLTE(FieldSubmissionID, v))
}

// SubmissionIDContains applies the Contains predicate on the "submission_id" field.
func SubmissionIDContains(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldContains(FieldSubmissionID, v))
}

// SubmissionIDHasPrefix applies the HasPrefix predicate on the "submission_id" field.
func SubmissionIDHasPrefix(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldHasPrefix(FieldSubmissionID, v))
}

// SubmissionIDHasSuffix applies the HasSuffix predicate on the "submission_id" field.
func SubmissionIDHasSuffix(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldHasSuffix(FieldSubmissionID, v))
}

// SubmissionIDEqualFold applies the EqualFold predicate on the "submission_id" field.
func SubmissionIDEqualFold(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEqualFold(FieldSubmissionID, v))
}

// SubmissionIDContainsFold applies the ContainsFold predicate on the "submission_id" field.
func SubmissionIDContainsFold(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldContainsFold(FieldSubmissionID, v))
}

// FieldIDEQ applies the EQ predicate on the "field_id" field.
func FieldIDEQ(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldFieldID, v))
}

// FieldIDNEQ applies the NEQ predicate on the "field_id" field.
func FieldIDNEQ(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNEQ(FieldFieldID, v))
}

// FieldIDIn applies the In predicate on the "field_id" field.
func FieldIDIn(vs ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldIn(FieldFieldID, vs...))
}

// FieldIDNotIn applies the NotIn predicate on the "field_id" field.
func FieldIDNotIn(vs ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNotIn(FieldFieldID, vs...))
}

// FieldIDGT applies the GT predicate on the "field_id" field.
func FieldIDGT(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGT(FieldFieldID, v))
}

// FieldIDGTE applies the GTE predicate on the "field_id" field.
func FieldIDGTE(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGTE(FieldFieldID, v))
}

// FieldIDLT applies the LT predicate on the "field_id" field.
func FieldIDLT(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLT(FieldFieldID, v))
}

// FieldIDLTE applies the LTE predicate on the "field_id" field.
func FieldIDLTE(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLTE(FieldFieldID, v))
}

// FieldIDContains applies the Contains predicate on the "field_id" field.
func FieldIDContains(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldContains(FieldFieldID, v))
}

// FieldIDHasPrefix applies the HasPrefix predicate on the "field_id" field.
func FieldIDHasPrefix(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldHasPrefix(FieldFieldID, v))
}

// FieldIDHasSuffix applies the HasSuffix predicate on the "field_id" field.
func FieldIDHasSuffix(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldHasSuffix(FieldFieldID, v))
}

// FieldIDEqualFold applies the EqualFold predicate on the "field_id" field.
func FieldIDEqualFold(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEqualFold(FieldFieldID, v))
}

// FieldIDContainsFold applies the ContainsFold predicate on the "field_id" field.
func FieldIDContainsFold(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldContainsFold(FieldFieldID, v))
}

// FieldValueEQ applies the EQ predicate on the "field_value" field.
func FieldValueEQ(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldFieldValue, v))
}

// FieldValueNEQ applies the NEQ predicate on the "field_value" field.
func FieldValueNEQ(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNEQ(FieldFieldValue, v))
}

// FieldValueIn applies the In predicate on the "field_value" field.
func FieldValueIn(vs ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldIn(FieldFieldValue, vs...))
}

// FieldValueNotIn applies the NotIn predicate on the "field_value" field.
func FieldValueNotIn(vs ...string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNotIn(FieldFieldValue, vs...))
}

// FieldValueGT applies the GT predicate on the "field_value" field.
func FieldValueGT(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGT(FieldFieldValue, v))
}

// FieldValueGTE applies the GTE predicate on the "field_value" field.
func FieldValueGTE(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGTE(FieldFieldValue, v))
}

// FieldValueLT applies the LT predicate on the "field_value" field.
func FieldValueLT(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLT(FieldFieldValue, v))
}

// FieldValueLTE applies the LTE predicate on the "field_value" field.
func FieldValueLTE(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLTE(FieldFieldValue, v))
}

// FieldValueContains applies the Contains predicate on the "field_value" field.
func FieldValueContains(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldContains(FieldFieldValue, v))
}

// FieldValueHasPrefix applies the HasPrefix predicate on the "field_value" field.
func FieldValueHasPrefix(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldHasPrefix(FieldFieldValue, v))
}

// FieldValueHasSuffix applies the HasSuffix predicate on the "field_value" field.
func FieldValueHasSuffix(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldHasSuffix(FieldFieldValue, v))
}

// FieldValueEqualFold applies the EqualFold predicate on the "field_value" field.
func FieldValueEqualFold(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEqualFold(FieldFieldValue, v))
}

// FieldValueContainsFold applies the ContainsFold predicate on the "field_value" field.
func FieldValueContainsFold(v string) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldContainsFold(FieldFieldValue, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(sql.FieldLTE(FieldCreateAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FormSubmissionData) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FormSubmissionData) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FormSubmissionData) predicate.FormSubmissionData {
	return predicate.FormSubmissionData(func(s *sql.Selector) {
		p(s.Not())
	})
}
