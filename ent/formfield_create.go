// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/formfield"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormFieldCreate is the builder for creating a FormField entity.
type FormFieldCreate struct {
	config
	mutation *FormFieldMutation
	hooks    []Hook
}

// SetFormID sets the "form_id" field.
func (ffc *FormFieldCreate) SetFormID(s string) *FormFieldCreate {
	ffc.mutation.SetFormID(s)
	return ffc
}

// SetFieldType sets the "field_type" field.
func (ffc *FormFieldCreate) SetFieldType(s string) *FormFieldCreate {
	ffc.mutation.SetFieldType(s)
	return ffc
}

// SetFieldLabel sets the "field_label" field.
func (ffc *FormFieldCreate) SetFieldLabel(s string) *FormFieldCreate {
	ffc.mutation.SetFieldLabel(s)
	return ffc
}

// SetFiledName sets the "filed_name" field.
func (ffc *FormFieldCreate) SetFiledName(s string) *FormFieldCreate {
	ffc.mutation.SetFiledName(s)
	return ffc
}

// SetIsRequired sets the "is_required" field.
func (ffc *FormFieldCreate) SetIsRequired(i int) *FormFieldCreate {
	ffc.mutation.SetIsRequired(i)
	return ffc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (ffc *FormFieldCreate) SetNillableIsRequired(i *int) *FormFieldCreate {
	if i != nil {
		ffc.SetIsRequired(*i)
	}
	return ffc
}

// SetOrderIndex sets the "order_index" field.
func (ffc *FormFieldCreate) SetOrderIndex(i int) *FormFieldCreate {
	ffc.mutation.SetOrderIndex(i)
	return ffc
}

// SetCreateAt sets the "create_at" field.
func (ffc *FormFieldCreate) SetCreateAt(t time.Time) *FormFieldCreate {
	ffc.mutation.SetCreateAt(t)
	return ffc
}

// SetUpdateAt sets the "update_at" field.
func (ffc *FormFieldCreate) SetUpdateAt(t time.Time) *FormFieldCreate {
	ffc.mutation.SetUpdateAt(t)
	return ffc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ffc *FormFieldCreate) SetNillableUpdateAt(t *time.Time) *FormFieldCreate {
	if t != nil {
		ffc.SetUpdateAt(*t)
	}
	return ffc
}

// SetOptions sets the "options" field.
func (ffc *FormFieldCreate) SetOptions(s string) *FormFieldCreate {
	ffc.mutation.SetOptions(s)
	return ffc
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (ffc *FormFieldCreate) SetNillableOptions(s *string) *FormFieldCreate {
	if s != nil {
		ffc.SetOptions(*s)
	}
	return ffc
}

// SetPlaceholder sets the "placeholder" field.
func (ffc *FormFieldCreate) SetPlaceholder(s string) *FormFieldCreate {
	ffc.mutation.SetPlaceholder(s)
	return ffc
}

// SetNillablePlaceholder sets the "placeholder" field if the given value is not nil.
func (ffc *FormFieldCreate) SetNillablePlaceholder(s *string) *FormFieldCreate {
	if s != nil {
		ffc.SetPlaceholder(*s)
	}
	return ffc
}

// SetID sets the "id" field.
func (ffc *FormFieldCreate) SetID(s string) *FormFieldCreate {
	ffc.mutation.SetID(s)
	return ffc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ffc *FormFieldCreate) SetNillableID(s *string) *FormFieldCreate {
	if s != nil {
		ffc.SetID(*s)
	}
	return ffc
}

// Mutation returns the FormFieldMutation object of the builder.
func (ffc *FormFieldCreate) Mutation() *FormFieldMutation {
	return ffc.mutation
}

// Save creates the FormField in the database.
func (ffc *FormFieldCreate) Save(ctx context.Context) (*FormField, error) {
	ffc.defaults()
	return withHooks[*FormField, FormFieldMutation](ctx, ffc.sqlSave, ffc.mutation, ffc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ffc *FormFieldCreate) SaveX(ctx context.Context) *FormField {
	v, err := ffc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffc *FormFieldCreate) Exec(ctx context.Context) error {
	_, err := ffc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffc *FormFieldCreate) ExecX(ctx context.Context) {
	if err := ffc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ffc *FormFieldCreate) defaults() {
	if _, ok := ffc.mutation.IsRequired(); !ok {
		v := formfield.DefaultIsRequired
		ffc.mutation.SetIsRequired(v)
	}
	if _, ok := ffc.mutation.ID(); !ok {
		v := formfield.DefaultID()
		ffc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffc *FormFieldCreate) check() error {
	if _, ok := ffc.mutation.FormID(); !ok {
		return &ValidationError{Name: "form_id", err: errors.New(`ent: missing required field "FormField.form_id"`)}
	}
	if _, ok := ffc.mutation.FieldType(); !ok {
		return &ValidationError{Name: "field_type", err: errors.New(`ent: missing required field "FormField.field_type"`)}
	}
	if _, ok := ffc.mutation.FieldLabel(); !ok {
		return &ValidationError{Name: "field_label", err: errors.New(`ent: missing required field "FormField.field_label"`)}
	}
	if _, ok := ffc.mutation.FiledName(); !ok {
		return &ValidationError{Name: "filed_name", err: errors.New(`ent: missing required field "FormField.filed_name"`)}
	}
	if _, ok := ffc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "FormField.is_required"`)}
	}
	if _, ok := ffc.mutation.OrderIndex(); !ok {
		return &ValidationError{Name: "order_index", err: errors.New(`ent: missing required field "FormField.order_index"`)}
	}
	if _, ok := ffc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "FormField.create_at"`)}
	}
	return nil
}

func (ffc *FormFieldCreate) sqlSave(ctx context.Context) (*FormField, error) {
	if err := ffc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ffc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ffc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FormField.ID type: %T", _spec.ID.Value)
		}
	}
	ffc.mutation.id = &_node.ID
	ffc.mutation.done = true
	return _node, nil
}

func (ffc *FormFieldCreate) createSpec() (*FormField, *sqlgraph.CreateSpec) {
	var (
		_node = &FormField{config: ffc.config}
		_spec = sqlgraph.NewCreateSpec(formfield.Table, sqlgraph.NewFieldSpec(formfield.FieldID, field.TypeString))
	)
	if id, ok := ffc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ffc.mutation.FormID(); ok {
		_spec.SetField(formfield.FieldFormID, field.TypeString, value)
		_node.FormID = value
	}
	if value, ok := ffc.mutation.FieldType(); ok {
		_spec.SetField(formfield.FieldFieldType, field.TypeString, value)
		_node.FieldType = value
	}
	if value, ok := ffc.mutation.FieldLabel(); ok {
		_spec.SetField(formfield.FieldFieldLabel, field.TypeString, value)
		_node.FieldLabel = value
	}
	if value, ok := ffc.mutation.FiledName(); ok {
		_spec.SetField(formfield.FieldFiledName, field.TypeString, value)
		_node.FiledName = value
	}
	if value, ok := ffc.mutation.IsRequired(); ok {
		_spec.SetField(formfield.FieldIsRequired, field.TypeInt, value)
		_node.IsRequired = value
	}
	if value, ok := ffc.mutation.OrderIndex(); ok {
		_spec.SetField(formfield.FieldOrderIndex, field.TypeInt, value)
		_node.OrderIndex = value
	}
	if value, ok := ffc.mutation.CreateAt(); ok {
		_spec.SetField(formfield.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := ffc.mutation.UpdateAt(); ok {
		_spec.SetField(formfield.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := ffc.mutation.Options(); ok {
		_spec.SetField(formfield.FieldOptions, field.TypeString, value)
		_node.Options = value
	}
	if value, ok := ffc.mutation.Placeholder(); ok {
		_spec.SetField(formfield.FieldPlaceholder, field.TypeString, value)
		_node.Placeholder = value
	}
	return _node, _spec
}

// FormFieldCreateBulk is the builder for creating many FormField entities in bulk.
type FormFieldCreateBulk struct {
	config
	builders []*FormFieldCreate
}

// Save creates the FormField entities in the database.
func (ffcb *FormFieldCreateBulk) Save(ctx context.Context) ([]*FormField, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ffcb.builders))
	nodes := make([]*FormField, len(ffcb.builders))
	mutators := make([]Mutator, len(ffcb.builders))
	for i := range ffcb.builders {
		func(i int, root context.Context) {
			builder := ffcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ffcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ffcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ffcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ffcb *FormFieldCreateBulk) SaveX(ctx context.Context) []*FormField {
	v, err := ffcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffcb *FormFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := ffcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffcb *FormFieldCreateBulk) ExecX(ctx context.Context) {
	if err := ffcb.Exec(ctx); err != nil {
		panic(err)
	}
}
