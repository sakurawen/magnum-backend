// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/formfield"
	"magnum/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormFieldUpdate is the builder for updating FormField entities.
type FormFieldUpdate struct {
	config
	hooks    []Hook
	mutation *FormFieldMutation
}

// Where appends a list predicates to the FormFieldUpdate builder.
func (ffu *FormFieldUpdate) Where(ps ...predicate.FormField) *FormFieldUpdate {
	ffu.mutation.Where(ps...)
	return ffu
}

// SetFormID sets the "form_id" field.
func (ffu *FormFieldUpdate) SetFormID(s string) *FormFieldUpdate {
	ffu.mutation.SetFormID(s)
	return ffu
}

// SetFieldType sets the "field_type" field.
func (ffu *FormFieldUpdate) SetFieldType(s string) *FormFieldUpdate {
	ffu.mutation.SetFieldType(s)
	return ffu
}

// SetFieldName sets the "field_name" field.
func (ffu *FormFieldUpdate) SetFieldName(s string) *FormFieldUpdate {
	ffu.mutation.SetFieldName(s)
	return ffu
}

// SetOrderIndex sets the "order_index" field.
func (ffu *FormFieldUpdate) SetOrderIndex(i int) *FormFieldUpdate {
	ffu.mutation.ResetOrderIndex()
	ffu.mutation.SetOrderIndex(i)
	return ffu
}

// SetNillableOrderIndex sets the "order_index" field if the given value is not nil.
func (ffu *FormFieldUpdate) SetNillableOrderIndex(i *int) *FormFieldUpdate {
	if i != nil {
		ffu.SetOrderIndex(*i)
	}
	return ffu
}

// AddOrderIndex adds i to the "order_index" field.
func (ffu *FormFieldUpdate) AddOrderIndex(i int) *FormFieldUpdate {
	ffu.mutation.AddOrderIndex(i)
	return ffu
}

// ClearOrderIndex clears the value of the "order_index" field.
func (ffu *FormFieldUpdate) ClearOrderIndex() *FormFieldUpdate {
	ffu.mutation.ClearOrderIndex()
	return ffu
}

// SetCreateAt sets the "create_at" field.
func (ffu *FormFieldUpdate) SetCreateAt(t time.Time) *FormFieldUpdate {
	ffu.mutation.SetCreateAt(t)
	return ffu
}

// SetUpdateAt sets the "update_at" field.
func (ffu *FormFieldUpdate) SetUpdateAt(t time.Time) *FormFieldUpdate {
	ffu.mutation.SetUpdateAt(t)
	return ffu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ffu *FormFieldUpdate) SetNillableUpdateAt(t *time.Time) *FormFieldUpdate {
	if t != nil {
		ffu.SetUpdateAt(*t)
	}
	return ffu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ffu *FormFieldUpdate) ClearUpdateAt() *FormFieldUpdate {
	ffu.mutation.ClearUpdateAt()
	return ffu
}

// SetDisabled sets the "disabled" field.
func (ffu *FormFieldUpdate) SetDisabled(i int) *FormFieldUpdate {
	ffu.mutation.ResetDisabled()
	ffu.mutation.SetDisabled(i)
	return ffu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ffu *FormFieldUpdate) SetNillableDisabled(i *int) *FormFieldUpdate {
	if i != nil {
		ffu.SetDisabled(*i)
	}
	return ffu
}

// AddDisabled adds i to the "disabled" field.
func (ffu *FormFieldUpdate) AddDisabled(i int) *FormFieldUpdate {
	ffu.mutation.AddDisabled(i)
	return ffu
}

// Mutation returns the FormFieldMutation object of the builder.
func (ffu *FormFieldUpdate) Mutation() *FormFieldMutation {
	return ffu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ffu *FormFieldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FormFieldMutation](ctx, ffu.sqlSave, ffu.mutation, ffu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffu *FormFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := ffu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ffu *FormFieldUpdate) Exec(ctx context.Context) error {
	_, err := ffu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffu *FormFieldUpdate) ExecX(ctx context.Context) {
	if err := ffu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ffu *FormFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(formfield.Table, formfield.Columns, sqlgraph.NewFieldSpec(formfield.FieldID, field.TypeString))
	if ps := ffu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffu.mutation.FormID(); ok {
		_spec.SetField(formfield.FieldFormID, field.TypeString, value)
	}
	if value, ok := ffu.mutation.FieldType(); ok {
		_spec.SetField(formfield.FieldFieldType, field.TypeString, value)
	}
	if value, ok := ffu.mutation.FieldName(); ok {
		_spec.SetField(formfield.FieldFieldName, field.TypeString, value)
	}
	if value, ok := ffu.mutation.OrderIndex(); ok {
		_spec.SetField(formfield.FieldOrderIndex, field.TypeInt, value)
	}
	if value, ok := ffu.mutation.AddedOrderIndex(); ok {
		_spec.AddField(formfield.FieldOrderIndex, field.TypeInt, value)
	}
	if ffu.mutation.OrderIndexCleared() {
		_spec.ClearField(formfield.FieldOrderIndex, field.TypeInt)
	}
	if value, ok := ffu.mutation.CreateAt(); ok {
		_spec.SetField(formfield.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := ffu.mutation.UpdateAt(); ok {
		_spec.SetField(formfield.FieldUpdateAt, field.TypeTime, value)
	}
	if ffu.mutation.UpdateAtCleared() {
		_spec.ClearField(formfield.FieldUpdateAt, field.TypeTime)
	}
	if value, ok := ffu.mutation.Disabled(); ok {
		_spec.SetField(formfield.FieldDisabled, field.TypeInt, value)
	}
	if value, ok := ffu.mutation.AddedDisabled(); ok {
		_spec.AddField(formfield.FieldDisabled, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ffu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ffu.mutation.done = true
	return n, nil
}

// FormFieldUpdateOne is the builder for updating a single FormField entity.
type FormFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormFieldMutation
}

// SetFormID sets the "form_id" field.
func (ffuo *FormFieldUpdateOne) SetFormID(s string) *FormFieldUpdateOne {
	ffuo.mutation.SetFormID(s)
	return ffuo
}

// SetFieldType sets the "field_type" field.
func (ffuo *FormFieldUpdateOne) SetFieldType(s string) *FormFieldUpdateOne {
	ffuo.mutation.SetFieldType(s)
	return ffuo
}

// SetFieldName sets the "field_name" field.
func (ffuo *FormFieldUpdateOne) SetFieldName(s string) *FormFieldUpdateOne {
	ffuo.mutation.SetFieldName(s)
	return ffuo
}

// SetOrderIndex sets the "order_index" field.
func (ffuo *FormFieldUpdateOne) SetOrderIndex(i int) *FormFieldUpdateOne {
	ffuo.mutation.ResetOrderIndex()
	ffuo.mutation.SetOrderIndex(i)
	return ffuo
}

// SetNillableOrderIndex sets the "order_index" field if the given value is not nil.
func (ffuo *FormFieldUpdateOne) SetNillableOrderIndex(i *int) *FormFieldUpdateOne {
	if i != nil {
		ffuo.SetOrderIndex(*i)
	}
	return ffuo
}

// AddOrderIndex adds i to the "order_index" field.
func (ffuo *FormFieldUpdateOne) AddOrderIndex(i int) *FormFieldUpdateOne {
	ffuo.mutation.AddOrderIndex(i)
	return ffuo
}

// ClearOrderIndex clears the value of the "order_index" field.
func (ffuo *FormFieldUpdateOne) ClearOrderIndex() *FormFieldUpdateOne {
	ffuo.mutation.ClearOrderIndex()
	return ffuo
}

// SetCreateAt sets the "create_at" field.
func (ffuo *FormFieldUpdateOne) SetCreateAt(t time.Time) *FormFieldUpdateOne {
	ffuo.mutation.SetCreateAt(t)
	return ffuo
}

// SetUpdateAt sets the "update_at" field.
func (ffuo *FormFieldUpdateOne) SetUpdateAt(t time.Time) *FormFieldUpdateOne {
	ffuo.mutation.SetUpdateAt(t)
	return ffuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ffuo *FormFieldUpdateOne) SetNillableUpdateAt(t *time.Time) *FormFieldUpdateOne {
	if t != nil {
		ffuo.SetUpdateAt(*t)
	}
	return ffuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ffuo *FormFieldUpdateOne) ClearUpdateAt() *FormFieldUpdateOne {
	ffuo.mutation.ClearUpdateAt()
	return ffuo
}

// SetDisabled sets the "disabled" field.
func (ffuo *FormFieldUpdateOne) SetDisabled(i int) *FormFieldUpdateOne {
	ffuo.mutation.ResetDisabled()
	ffuo.mutation.SetDisabled(i)
	return ffuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ffuo *FormFieldUpdateOne) SetNillableDisabled(i *int) *FormFieldUpdateOne {
	if i != nil {
		ffuo.SetDisabled(*i)
	}
	return ffuo
}

// AddDisabled adds i to the "disabled" field.
func (ffuo *FormFieldUpdateOne) AddDisabled(i int) *FormFieldUpdateOne {
	ffuo.mutation.AddDisabled(i)
	return ffuo
}

// Mutation returns the FormFieldMutation object of the builder.
func (ffuo *FormFieldUpdateOne) Mutation() *FormFieldMutation {
	return ffuo.mutation
}

// Where appends a list predicates to the FormFieldUpdate builder.
func (ffuo *FormFieldUpdateOne) Where(ps ...predicate.FormField) *FormFieldUpdateOne {
	ffuo.mutation.Where(ps...)
	return ffuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ffuo *FormFieldUpdateOne) Select(field string, fields ...string) *FormFieldUpdateOne {
	ffuo.fields = append([]string{field}, fields...)
	return ffuo
}

// Save executes the query and returns the updated FormField entity.
func (ffuo *FormFieldUpdateOne) Save(ctx context.Context) (*FormField, error) {
	return withHooks[*FormField, FormFieldMutation](ctx, ffuo.sqlSave, ffuo.mutation, ffuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffuo *FormFieldUpdateOne) SaveX(ctx context.Context) *FormField {
	node, err := ffuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ffuo *FormFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := ffuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffuo *FormFieldUpdateOne) ExecX(ctx context.Context) {
	if err := ffuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ffuo *FormFieldUpdateOne) sqlSave(ctx context.Context) (_node *FormField, err error) {
	_spec := sqlgraph.NewUpdateSpec(formfield.Table, formfield.Columns, sqlgraph.NewFieldSpec(formfield.FieldID, field.TypeString))
	id, ok := ffuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FormField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ffuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, formfield.FieldID)
		for _, f := range fields {
			if !formfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != formfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ffuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffuo.mutation.FormID(); ok {
		_spec.SetField(formfield.FieldFormID, field.TypeString, value)
	}
	if value, ok := ffuo.mutation.FieldType(); ok {
		_spec.SetField(formfield.FieldFieldType, field.TypeString, value)
	}
	if value, ok := ffuo.mutation.FieldName(); ok {
		_spec.SetField(formfield.FieldFieldName, field.TypeString, value)
	}
	if value, ok := ffuo.mutation.OrderIndex(); ok {
		_spec.SetField(formfield.FieldOrderIndex, field.TypeInt, value)
	}
	if value, ok := ffuo.mutation.AddedOrderIndex(); ok {
		_spec.AddField(formfield.FieldOrderIndex, field.TypeInt, value)
	}
	if ffuo.mutation.OrderIndexCleared() {
		_spec.ClearField(formfield.FieldOrderIndex, field.TypeInt)
	}
	if value, ok := ffuo.mutation.CreateAt(); ok {
		_spec.SetField(formfield.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := ffuo.mutation.UpdateAt(); ok {
		_spec.SetField(formfield.FieldUpdateAt, field.TypeTime, value)
	}
	if ffuo.mutation.UpdateAtCleared() {
		_spec.ClearField(formfield.FieldUpdateAt, field.TypeTime)
	}
	if value, ok := ffuo.mutation.Disabled(); ok {
		_spec.SetField(formfield.FieldDisabled, field.TypeInt, value)
	}
	if value, ok := ffuo.mutation.AddedDisabled(); ok {
		_spec.AddField(formfield.FieldDisabled, field.TypeInt, value)
	}
	_node = &FormField{config: ffuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ffuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ffuo.mutation.done = true
	return _node, nil
}
