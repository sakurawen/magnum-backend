// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"magnum/ent/formfieldconfig"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// FormFieldConfig is the model entity for the FormFieldConfig schema.
type FormFieldConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// 配置对应字段的id
	FieldID string `json:"field_id,omitempty"`
	// 配置对应的表单id
	FormID string `json:"form_id,omitempty"`
	// 配置key
	Key string `json:"key,omitempty"`
	// 配置类型
	Type string `json:"type,omitempty"`
	// 配置值
	Value string `json:"value,omitempty"`
	// 当值的类型是数组或者对象时，使用序列化的json存储
	JSONStringValue string `json:"json_string_value,omitempty"`
	// 配置名称
	Text string `json:"text,omitempty"`
	// OrderIndex holds the value of the "order_index" field.
	OrderIndex int `json:"order_index"`
	// Disabled holds the value of the "disabled" field.
	Disabled int `json:"disabled"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FormFieldConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case formfieldconfig.FieldOrderIndex, formfieldconfig.FieldDisabled:
			values[i] = new(sql.NullInt64)
		case formfieldconfig.FieldID, formfieldconfig.FieldFieldID, formfieldconfig.FieldFormID, formfieldconfig.FieldKey, formfieldconfig.FieldType, formfieldconfig.FieldValue, formfieldconfig.FieldJSONStringValue, formfieldconfig.FieldText:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FormFieldConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FormFieldConfig fields.
func (ffc *FormFieldConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case formfieldconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ffc.ID = value.String
			}
		case formfieldconfig.FieldFieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field_id", values[i])
			} else if value.Valid {
				ffc.FieldID = value.String
			}
		case formfieldconfig.FieldFormID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_id", values[i])
			} else if value.Valid {
				ffc.FormID = value.String
			}
		case formfieldconfig.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ffc.Key = value.String
			}
		case formfieldconfig.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ffc.Type = value.String
			}
		case formfieldconfig.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ffc.Value = value.String
			}
		case formfieldconfig.FieldJSONStringValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field json_string_value", values[i])
			} else if value.Valid {
				ffc.JSONStringValue = value.String
			}
		case formfieldconfig.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ffc.Text = value.String
			}
		case formfieldconfig.FieldOrderIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_index", values[i])
			} else if value.Valid {
				ffc.OrderIndex = int(value.Int64)
			}
		case formfieldconfig.FieldDisabled:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				ffc.Disabled = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FormFieldConfig.
// Note that you need to call FormFieldConfig.Unwrap() before calling this method if this FormFieldConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (ffc *FormFieldConfig) Update() *FormFieldConfigUpdateOne {
	return NewFormFieldConfigClient(ffc.config).UpdateOne(ffc)
}

// Unwrap unwraps the FormFieldConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ffc *FormFieldConfig) Unwrap() *FormFieldConfig {
	_tx, ok := ffc.config.driver.(*txDriver)
	if !ok {
		panic("ent: FormFieldConfig is not a transactional entity")
	}
	ffc.config.driver = _tx.drv
	return ffc
}

// String implements the fmt.Stringer.
func (ffc *FormFieldConfig) String() string {
	var builder strings.Builder
	builder.WriteString("FormFieldConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ffc.ID))
	builder.WriteString("field_id=")
	builder.WriteString(ffc.FieldID)
	builder.WriteString(", ")
	builder.WriteString("form_id=")
	builder.WriteString(ffc.FormID)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(ffc.Key)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ffc.Type)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ffc.Value)
	builder.WriteString(", ")
	builder.WriteString("json_string_value=")
	builder.WriteString(ffc.JSONStringValue)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(ffc.Text)
	builder.WriteString(", ")
	builder.WriteString("order_index=")
	builder.WriteString(fmt.Sprintf("%v", ffc.OrderIndex))
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", ffc.Disabled))
	builder.WriteByte(')')
	return builder.String()
}

// FormFieldConfigs is a parsable slice of FormFieldConfig.
type FormFieldConfigs []*FormFieldConfig
