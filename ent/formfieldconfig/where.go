// Code generated by ent, DO NOT EDIT.

package formfieldconfig

import (
	"magnum/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldID, id))
}

// FormID applies equality check predicate on the "form_id" field. It's identical to FormIDEQ.
func FormID(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldFormID, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldKey, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldType, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldValue, v))
}

// JSONStringValue applies equality check predicate on the "json_string_value" field. It's identical to JSONStringValueEQ.
func JSONStringValue(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldJSONStringValue, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldText, v))
}

// OrderIndex applies equality check predicate on the "order_index" field. It's identical to OrderIndexEQ.
func OrderIndex(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldOrderIndex, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldDisabled, v))
}

// FieldIDEQ applies the EQ predicate on the "field_id" field.
func FieldIDEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldFieldID, v))
}

// FieldIDNEQ applies the NEQ predicate on the "field_id" field.
func FieldIDNEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldFieldID, v))
}

// FieldIDIn applies the In predicate on the "field_id" field.
func FieldIDIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldFieldID, vs...))
}

// FieldIDNotIn applies the NotIn predicate on the "field_id" field.
func FieldIDNotIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldFieldID, vs...))
}

// FieldIDGT applies the GT predicate on the "field_id" field.
func FieldIDGT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldFieldID, v))
}

// FieldIDGTE applies the GTE predicate on the "field_id" field.
func FieldIDGTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldFieldID, v))
}

// FieldIDLT applies the LT predicate on the "field_id" field.
func FieldIDLT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldFieldID, v))
}

// FieldIDLTE applies the LTE predicate on the "field_id" field.
func FieldIDLTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldFieldID, v))
}

// FieldIDContains applies the Contains predicate on the "field_id" field.
func FieldIDContains(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContains(FieldFieldID, v))
}

// FieldIDHasPrefix applies the HasPrefix predicate on the "field_id" field.
func FieldIDHasPrefix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasPrefix(FieldFieldID, v))
}

// FieldIDHasSuffix applies the HasSuffix predicate on the "field_id" field.
func FieldIDHasSuffix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasSuffix(FieldFieldID, v))
}

// FieldIDEqualFold applies the EqualFold predicate on the "field_id" field.
func FieldIDEqualFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEqualFold(FieldFieldID, v))
}

// FieldIDContainsFold applies the ContainsFold predicate on the "field_id" field.
func FieldIDContainsFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContainsFold(FieldFieldID, v))
}

// FormIDEQ applies the EQ predicate on the "form_id" field.
func FormIDEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldFormID, v))
}

// FormIDNEQ applies the NEQ predicate on the "form_id" field.
func FormIDNEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldFormID, v))
}

// FormIDIn applies the In predicate on the "form_id" field.
func FormIDIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldFormID, vs...))
}

// FormIDNotIn applies the NotIn predicate on the "form_id" field.
func FormIDNotIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldFormID, vs...))
}

// FormIDGT applies the GT predicate on the "form_id" field.
func FormIDGT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldFormID, v))
}

// FormIDGTE applies the GTE predicate on the "form_id" field.
func FormIDGTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldFormID, v))
}

// FormIDLT applies the LT predicate on the "form_id" field.
func FormIDLT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldFormID, v))
}

// FormIDLTE applies the LTE predicate on the "form_id" field.
func FormIDLTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldFormID, v))
}

// FormIDContains applies the Contains predicate on the "form_id" field.
func FormIDContains(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContains(FieldFormID, v))
}

// FormIDHasPrefix applies the HasPrefix predicate on the "form_id" field.
func FormIDHasPrefix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasPrefix(FieldFormID, v))
}

// FormIDHasSuffix applies the HasSuffix predicate on the "form_id" field.
func FormIDHasSuffix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasSuffix(FieldFormID, v))
}

// FormIDEqualFold applies the EqualFold predicate on the "form_id" field.
func FormIDEqualFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEqualFold(FieldFormID, v))
}

// FormIDContainsFold applies the ContainsFold predicate on the "form_id" field.
func FormIDContainsFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContainsFold(FieldFormID, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContainsFold(FieldKey, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContainsFold(FieldType, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContainsFold(FieldValue, v))
}

// JSONStringValueEQ applies the EQ predicate on the "json_string_value" field.
func JSONStringValueEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldJSONStringValue, v))
}

// JSONStringValueNEQ applies the NEQ predicate on the "json_string_value" field.
func JSONStringValueNEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldJSONStringValue, v))
}

// JSONStringValueIn applies the In predicate on the "json_string_value" field.
func JSONStringValueIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldJSONStringValue, vs...))
}

// JSONStringValueNotIn applies the NotIn predicate on the "json_string_value" field.
func JSONStringValueNotIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldJSONStringValue, vs...))
}

// JSONStringValueGT applies the GT predicate on the "json_string_value" field.
func JSONStringValueGT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldJSONStringValue, v))
}

// JSONStringValueGTE applies the GTE predicate on the "json_string_value" field.
func JSONStringValueGTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldJSONStringValue, v))
}

// JSONStringValueLT applies the LT predicate on the "json_string_value" field.
func JSONStringValueLT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldJSONStringValue, v))
}

// JSONStringValueLTE applies the LTE predicate on the "json_string_value" field.
func JSONStringValueLTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldJSONStringValue, v))
}

// JSONStringValueContains applies the Contains predicate on the "json_string_value" field.
func JSONStringValueContains(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContains(FieldJSONStringValue, v))
}

// JSONStringValueHasPrefix applies the HasPrefix predicate on the "json_string_value" field.
func JSONStringValueHasPrefix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasPrefix(FieldJSONStringValue, v))
}

// JSONStringValueHasSuffix applies the HasSuffix predicate on the "json_string_value" field.
func JSONStringValueHasSuffix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasSuffix(FieldJSONStringValue, v))
}

// JSONStringValueIsNil applies the IsNil predicate on the "json_string_value" field.
func JSONStringValueIsNil() predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIsNull(FieldJSONStringValue))
}

// JSONStringValueNotNil applies the NotNil predicate on the "json_string_value" field.
func JSONStringValueNotNil() predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotNull(FieldJSONStringValue))
}

// JSONStringValueEqualFold applies the EqualFold predicate on the "json_string_value" field.
func JSONStringValueEqualFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEqualFold(FieldJSONStringValue, v))
}

// JSONStringValueContainsFold applies the ContainsFold predicate on the "json_string_value" field.
func JSONStringValueContainsFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContainsFold(FieldJSONStringValue, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldContainsFold(FieldText, v))
}

// OrderIndexEQ applies the EQ predicate on the "order_index" field.
func OrderIndexEQ(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldOrderIndex, v))
}

// OrderIndexNEQ applies the NEQ predicate on the "order_index" field.
func OrderIndexNEQ(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldOrderIndex, v))
}

// OrderIndexIn applies the In predicate on the "order_index" field.
func OrderIndexIn(vs ...int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldOrderIndex, vs...))
}

// OrderIndexNotIn applies the NotIn predicate on the "order_index" field.
func OrderIndexNotIn(vs ...int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldOrderIndex, vs...))
}

// OrderIndexGT applies the GT predicate on the "order_index" field.
func OrderIndexGT(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldOrderIndex, v))
}

// OrderIndexGTE applies the GTE predicate on the "order_index" field.
func OrderIndexGTE(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldOrderIndex, v))
}

// OrderIndexLT applies the LT predicate on the "order_index" field.
func OrderIndexLT(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldOrderIndex, v))
}

// OrderIndexLTE applies the LTE predicate on the "order_index" field.
func OrderIndexLTE(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldOrderIndex, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIn applies the In predicate on the "disabled" field.
func DisabledIn(vs ...int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldIn(FieldDisabled, vs...))
}

// DisabledNotIn applies the NotIn predicate on the "disabled" field.
func DisabledNotIn(vs ...int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldNotIn(FieldDisabled, vs...))
}

// DisabledGT applies the GT predicate on the "disabled" field.
func DisabledGT(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGT(FieldDisabled, v))
}

// DisabledGTE applies the GTE predicate on the "disabled" field.
func DisabledGTE(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldGTE(FieldDisabled, v))
}

// DisabledLT applies the LT predicate on the "disabled" field.
func DisabledLT(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLT(FieldDisabled, v))
}

// DisabledLTE applies the LTE predicate on the "disabled" field.
func DisabledLTE(v int) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(sql.FieldLTE(FieldDisabled, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FormFieldConfig) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FormFieldConfig) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FormFieldConfig) predicate.FormFieldConfig {
	return predicate.FormFieldConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
