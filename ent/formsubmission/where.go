// Code generated by ent, DO NOT EDIT.

package formsubmission

import (
	"magnum/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLTE(FieldID, id))
}

// FormID applies equality check predicate on the "form_id" field. It's identical to FormIDEQ.
func FormID(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldFormID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldUserID, v))
}

// CreateID applies equality check predicate on the "create_id" field. It's identical to CreateIDEQ.
func CreateID(v time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldCreateID, v))
}

// FormIDEQ applies the EQ predicate on the "form_id" field.
func FormIDEQ(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldFormID, v))
}

// FormIDNEQ applies the NEQ predicate on the "form_id" field.
func FormIDNEQ(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNEQ(FieldFormID, v))
}

// FormIDIn applies the In predicate on the "form_id" field.
func FormIDIn(vs ...string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldIn(FieldFormID, vs...))
}

// FormIDNotIn applies the NotIn predicate on the "form_id" field.
func FormIDNotIn(vs ...string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNotIn(FieldFormID, vs...))
}

// FormIDGT applies the GT predicate on the "form_id" field.
func FormIDGT(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGT(FieldFormID, v))
}

// FormIDGTE applies the GTE predicate on the "form_id" field.
func FormIDGTE(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGTE(FieldFormID, v))
}

// FormIDLT applies the LT predicate on the "form_id" field.
func FormIDLT(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLT(FieldFormID, v))
}

// FormIDLTE applies the LTE predicate on the "form_id" field.
func FormIDLTE(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLTE(FieldFormID, v))
}

// FormIDContains applies the Contains predicate on the "form_id" field.
func FormIDContains(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldContains(FieldFormID, v))
}

// FormIDHasPrefix applies the HasPrefix predicate on the "form_id" field.
func FormIDHasPrefix(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldHasPrefix(FieldFormID, v))
}

// FormIDHasSuffix applies the HasSuffix predicate on the "form_id" field.
func FormIDHasSuffix(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldHasSuffix(FieldFormID, v))
}

// FormIDEqualFold applies the EqualFold predicate on the "form_id" field.
func FormIDEqualFold(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEqualFold(FieldFormID, v))
}

// FormIDContainsFold applies the ContainsFold predicate on the "form_id" field.
func FormIDContainsFold(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldContainsFold(FieldFormID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldContainsFold(FieldUserID, v))
}

// CreateIDEQ applies the EQ predicate on the "create_id" field.
func CreateIDEQ(v time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldEQ(FieldCreateID, v))
}

// CreateIDNEQ applies the NEQ predicate on the "create_id" field.
func CreateIDNEQ(v time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNEQ(FieldCreateID, v))
}

// CreateIDIn applies the In predicate on the "create_id" field.
func CreateIDIn(vs ...time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldIn(FieldCreateID, vs...))
}

// CreateIDNotIn applies the NotIn predicate on the "create_id" field.
func CreateIDNotIn(vs ...time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldNotIn(FieldCreateID, vs...))
}

// CreateIDGT applies the GT predicate on the "create_id" field.
func CreateIDGT(v time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGT(FieldCreateID, v))
}

// CreateIDGTE applies the GTE predicate on the "create_id" field.
func CreateIDGTE(v time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldGTE(FieldCreateID, v))
}

// CreateIDLT applies the LT predicate on the "create_id" field.
func CreateIDLT(v time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLT(FieldCreateID, v))
}

// CreateIDLTE applies the LTE predicate on the "create_id" field.
func CreateIDLTE(v time.Time) predicate.FormSubmission {
	return predicate.FormSubmission(sql.FieldLTE(FieldCreateID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FormSubmission) predicate.FormSubmission {
	return predicate.FormSubmission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FormSubmission) predicate.FormSubmission {
	return predicate.FormSubmission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FormSubmission) predicate.FormSubmission {
	return predicate.FormSubmission(func(s *sql.Selector) {
		p(s.Not())
	})
}
