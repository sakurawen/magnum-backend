// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"magnum/ent/formsubmission"
	"magnum/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormSubmissionUpdate is the builder for updating FormSubmission entities.
type FormSubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *FormSubmissionMutation
}

// Where appends a list predicates to the FormSubmissionUpdate builder.
func (fsu *FormSubmissionUpdate) Where(ps ...predicate.FormSubmission) *FormSubmissionUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetFormID sets the "form_id" field.
func (fsu *FormSubmissionUpdate) SetFormID(s string) *FormSubmissionUpdate {
	fsu.mutation.SetFormID(s)
	return fsu
}

// SetUserID sets the "user_id" field.
func (fsu *FormSubmissionUpdate) SetUserID(s string) *FormSubmissionUpdate {
	fsu.mutation.SetUserID(s)
	return fsu
}

// SetCreateAt sets the "create_at" field.
func (fsu *FormSubmissionUpdate) SetCreateAt(t time.Time) *FormSubmissionUpdate {
	fsu.mutation.SetCreateAt(t)
	return fsu
}

// SetIsDeleted sets the "is_deleted" field.
func (fsu *FormSubmissionUpdate) SetIsDeleted(i int) *FormSubmissionUpdate {
	fsu.mutation.ResetIsDeleted()
	fsu.mutation.SetIsDeleted(i)
	return fsu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (fsu *FormSubmissionUpdate) SetNillableIsDeleted(i *int) *FormSubmissionUpdate {
	if i != nil {
		fsu.SetIsDeleted(*i)
	}
	return fsu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (fsu *FormSubmissionUpdate) AddIsDeleted(i int) *FormSubmissionUpdate {
	fsu.mutation.AddIsDeleted(i)
	return fsu
}

// Mutation returns the FormSubmissionMutation object of the builder.
func (fsu *FormSubmissionUpdate) Mutation() *FormSubmissionMutation {
	return fsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FormSubmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FormSubmissionMutation](ctx, fsu.sqlSave, fsu.mutation, fsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FormSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FormSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FormSubmissionUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsu *FormSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(formsubmission.Table, formsubmission.Columns, sqlgraph.NewFieldSpec(formsubmission.FieldID, field.TypeString))
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.FormID(); ok {
		_spec.SetField(formsubmission.FieldFormID, field.TypeString, value)
	}
	if value, ok := fsu.mutation.UserID(); ok {
		_spec.SetField(formsubmission.FieldUserID, field.TypeString, value)
	}
	if value, ok := fsu.mutation.CreateAt(); ok {
		_spec.SetField(formsubmission.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := fsu.mutation.IsDeleted(); ok {
		_spec.SetField(formsubmission.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := fsu.mutation.AddedIsDeleted(); ok {
		_spec.AddField(formsubmission.FieldIsDeleted, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsu.mutation.done = true
	return n, nil
}

// FormSubmissionUpdateOne is the builder for updating a single FormSubmission entity.
type FormSubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormSubmissionMutation
}

// SetFormID sets the "form_id" field.
func (fsuo *FormSubmissionUpdateOne) SetFormID(s string) *FormSubmissionUpdateOne {
	fsuo.mutation.SetFormID(s)
	return fsuo
}

// SetUserID sets the "user_id" field.
func (fsuo *FormSubmissionUpdateOne) SetUserID(s string) *FormSubmissionUpdateOne {
	fsuo.mutation.SetUserID(s)
	return fsuo
}

// SetCreateAt sets the "create_at" field.
func (fsuo *FormSubmissionUpdateOne) SetCreateAt(t time.Time) *FormSubmissionUpdateOne {
	fsuo.mutation.SetCreateAt(t)
	return fsuo
}

// SetIsDeleted sets the "is_deleted" field.
func (fsuo *FormSubmissionUpdateOne) SetIsDeleted(i int) *FormSubmissionUpdateOne {
	fsuo.mutation.ResetIsDeleted()
	fsuo.mutation.SetIsDeleted(i)
	return fsuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (fsuo *FormSubmissionUpdateOne) SetNillableIsDeleted(i *int) *FormSubmissionUpdateOne {
	if i != nil {
		fsuo.SetIsDeleted(*i)
	}
	return fsuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (fsuo *FormSubmissionUpdateOne) AddIsDeleted(i int) *FormSubmissionUpdateOne {
	fsuo.mutation.AddIsDeleted(i)
	return fsuo
}

// Mutation returns the FormSubmissionMutation object of the builder.
func (fsuo *FormSubmissionUpdateOne) Mutation() *FormSubmissionMutation {
	return fsuo.mutation
}

// Where appends a list predicates to the FormSubmissionUpdate builder.
func (fsuo *FormSubmissionUpdateOne) Where(ps ...predicate.FormSubmission) *FormSubmissionUpdateOne {
	fsuo.mutation.Where(ps...)
	return fsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FormSubmissionUpdateOne) Select(field string, fields ...string) *FormSubmissionUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FormSubmission entity.
func (fsuo *FormSubmissionUpdateOne) Save(ctx context.Context) (*FormSubmission, error) {
	return withHooks[*FormSubmission, FormSubmissionMutation](ctx, fsuo.sqlSave, fsuo.mutation, fsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FormSubmissionUpdateOne) SaveX(ctx context.Context) *FormSubmission {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FormSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FormSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsuo *FormSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *FormSubmission, err error) {
	_spec := sqlgraph.NewUpdateSpec(formsubmission.Table, formsubmission.Columns, sqlgraph.NewFieldSpec(formsubmission.FieldID, field.TypeString))
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FormSubmission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, formsubmission.FieldID)
		for _, f := range fields {
			if !formsubmission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != formsubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.FormID(); ok {
		_spec.SetField(formsubmission.FieldFormID, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.UserID(); ok {
		_spec.SetField(formsubmission.FieldUserID, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.CreateAt(); ok {
		_spec.SetField(formsubmission.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := fsuo.mutation.IsDeleted(); ok {
		_spec.SetField(formsubmission.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := fsuo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(formsubmission.FieldIsDeleted, field.TypeInt, value)
	}
	_node = &FormSubmission{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsuo.mutation.done = true
	return _node, nil
}
